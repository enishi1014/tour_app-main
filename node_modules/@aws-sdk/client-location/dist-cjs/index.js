"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AccessDeniedException: () => AccessDeniedException,
  AssociateTrackerConsumerCommand: () => AssociateTrackerConsumerCommand,
  BatchDeleteDevicePositionHistoryCommand: () => BatchDeleteDevicePositionHistoryCommand,
  BatchDeleteGeofenceCommand: () => BatchDeleteGeofenceCommand,
  BatchEvaluateGeofencesCommand: () => BatchEvaluateGeofencesCommand,
  BatchEvaluateGeofencesRequestFilterSensitiveLog: () => BatchEvaluateGeofencesRequestFilterSensitiveLog,
  BatchGetDevicePositionCommand: () => BatchGetDevicePositionCommand,
  BatchGetDevicePositionResponseFilterSensitiveLog: () => BatchGetDevicePositionResponseFilterSensitiveLog,
  BatchPutGeofenceCommand: () => BatchPutGeofenceCommand,
  BatchPutGeofenceRequestEntryFilterSensitiveLog: () => BatchPutGeofenceRequestEntryFilterSensitiveLog,
  BatchPutGeofenceRequestFilterSensitiveLog: () => BatchPutGeofenceRequestFilterSensitiveLog,
  BatchUpdateDevicePositionCommand: () => BatchUpdateDevicePositionCommand,
  BatchUpdateDevicePositionRequestFilterSensitiveLog: () => BatchUpdateDevicePositionRequestFilterSensitiveLog,
  CalculateRouteCommand: () => CalculateRouteCommand,
  CalculateRouteMatrixCommand: () => CalculateRouteMatrixCommand,
  CalculateRouteMatrixRequestFilterSensitiveLog: () => CalculateRouteMatrixRequestFilterSensitiveLog,
  CalculateRouteMatrixResponseFilterSensitiveLog: () => CalculateRouteMatrixResponseFilterSensitiveLog,
  CalculateRouteRequestFilterSensitiveLog: () => CalculateRouteRequestFilterSensitiveLog,
  CalculateRouteResponseFilterSensitiveLog: () => CalculateRouteResponseFilterSensitiveLog,
  CalculateRouteSummaryFilterSensitiveLog: () => CalculateRouteSummaryFilterSensitiveLog,
  CircleFilterSensitiveLog: () => CircleFilterSensitiveLog,
  ConflictException: () => ConflictException,
  CreateGeofenceCollectionCommand: () => CreateGeofenceCollectionCommand,
  CreateKeyCommand: () => CreateKeyCommand,
  CreateKeyResponseFilterSensitiveLog: () => CreateKeyResponseFilterSensitiveLog,
  CreateMapCommand: () => CreateMapCommand,
  CreatePlaceIndexCommand: () => CreatePlaceIndexCommand,
  CreateRouteCalculatorCommand: () => CreateRouteCalculatorCommand,
  CreateTrackerCommand: () => CreateTrackerCommand,
  DeleteGeofenceCollectionCommand: () => DeleteGeofenceCollectionCommand,
  DeleteKeyCommand: () => DeleteKeyCommand,
  DeleteMapCommand: () => DeleteMapCommand,
  DeletePlaceIndexCommand: () => DeletePlaceIndexCommand,
  DeleteRouteCalculatorCommand: () => DeleteRouteCalculatorCommand,
  DeleteTrackerCommand: () => DeleteTrackerCommand,
  DescribeGeofenceCollectionCommand: () => DescribeGeofenceCollectionCommand,
  DescribeKeyCommand: () => DescribeKeyCommand,
  DescribeKeyResponseFilterSensitiveLog: () => DescribeKeyResponseFilterSensitiveLog,
  DescribeMapCommand: () => DescribeMapCommand,
  DescribePlaceIndexCommand: () => DescribePlaceIndexCommand,
  DescribeRouteCalculatorCommand: () => DescribeRouteCalculatorCommand,
  DescribeTrackerCommand: () => DescribeTrackerCommand,
  DevicePositionFilterSensitiveLog: () => DevicePositionFilterSensitiveLog,
  DevicePositionUpdateFilterSensitiveLog: () => DevicePositionUpdateFilterSensitiveLog,
  DeviceStateFilterSensitiveLog: () => DeviceStateFilterSensitiveLog,
  DisassociateTrackerConsumerCommand: () => DisassociateTrackerConsumerCommand,
  ForecastGeofenceEventsCommand: () => ForecastGeofenceEventsCommand,
  ForecastGeofenceEventsDeviceStateFilterSensitiveLog: () => ForecastGeofenceEventsDeviceStateFilterSensitiveLog,
  ForecastGeofenceEventsRequestFilterSensitiveLog: () => ForecastGeofenceEventsRequestFilterSensitiveLog,
  ForecastGeofenceEventsResponseFilterSensitiveLog: () => ForecastGeofenceEventsResponseFilterSensitiveLog,
  ForecastedEventFilterSensitiveLog: () => ForecastedEventFilterSensitiveLog,
  GeofenceGeometryFilterSensitiveLog: () => GeofenceGeometryFilterSensitiveLog,
  GetDevicePositionCommand: () => GetDevicePositionCommand,
  GetDevicePositionHistoryCommand: () => GetDevicePositionHistoryCommand,
  GetDevicePositionHistoryResponseFilterSensitiveLog: () => GetDevicePositionHistoryResponseFilterSensitiveLog,
  GetDevicePositionResponseFilterSensitiveLog: () => GetDevicePositionResponseFilterSensitiveLog,
  GetGeofenceCommand: () => GetGeofenceCommand,
  GetGeofenceResponseFilterSensitiveLog: () => GetGeofenceResponseFilterSensitiveLog,
  GetMapGlyphsCommand: () => GetMapGlyphsCommand,
  GetMapGlyphsRequestFilterSensitiveLog: () => GetMapGlyphsRequestFilterSensitiveLog,
  GetMapSpritesCommand: () => GetMapSpritesCommand,
  GetMapSpritesRequestFilterSensitiveLog: () => GetMapSpritesRequestFilterSensitiveLog,
  GetMapStyleDescriptorCommand: () => GetMapStyleDescriptorCommand,
  GetMapStyleDescriptorRequestFilterSensitiveLog: () => GetMapStyleDescriptorRequestFilterSensitiveLog,
  GetMapTileCommand: () => GetMapTileCommand,
  GetMapTileRequestFilterSensitiveLog: () => GetMapTileRequestFilterSensitiveLog,
  GetPlaceCommand: () => GetPlaceCommand,
  GetPlaceRequestFilterSensitiveLog: () => GetPlaceRequestFilterSensitiveLog,
  GetPlaceResponseFilterSensitiveLog: () => GetPlaceResponseFilterSensitiveLog,
  InferredStateFilterSensitiveLog: () => InferredStateFilterSensitiveLog,
  InternalServerException: () => InternalServerException,
  LegFilterSensitiveLog: () => LegFilterSensitiveLog,
  LegGeometryFilterSensitiveLog: () => LegGeometryFilterSensitiveLog,
  ListDevicePositionsCommand: () => ListDevicePositionsCommand,
  ListDevicePositionsRequestFilterSensitiveLog: () => ListDevicePositionsRequestFilterSensitiveLog,
  ListDevicePositionsResponseEntryFilterSensitiveLog: () => ListDevicePositionsResponseEntryFilterSensitiveLog,
  ListDevicePositionsResponseFilterSensitiveLog: () => ListDevicePositionsResponseFilterSensitiveLog,
  ListGeofenceCollectionsCommand: () => ListGeofenceCollectionsCommand,
  ListGeofenceResponseEntryFilterSensitiveLog: () => ListGeofenceResponseEntryFilterSensitiveLog,
  ListGeofencesCommand: () => ListGeofencesCommand,
  ListGeofencesResponseFilterSensitiveLog: () => ListGeofencesResponseFilterSensitiveLog,
  ListKeysCommand: () => ListKeysCommand,
  ListMapsCommand: () => ListMapsCommand,
  ListPlaceIndexesCommand: () => ListPlaceIndexesCommand,
  ListRouteCalculatorsCommand: () => ListRouteCalculatorsCommand,
  ListTagsForResourceCommand: () => ListTagsForResourceCommand,
  ListTrackerConsumersCommand: () => ListTrackerConsumersCommand,
  ListTrackersCommand: () => ListTrackersCommand,
  Location: () => Location,
  LocationClient: () => LocationClient,
  LocationServiceException: () => LocationServiceException,
  PlaceFilterSensitiveLog: () => PlaceFilterSensitiveLog,
  PlaceGeometryFilterSensitiveLog: () => PlaceGeometryFilterSensitiveLog,
  PutGeofenceCommand: () => PutGeofenceCommand,
  PutGeofenceRequestFilterSensitiveLog: () => PutGeofenceRequestFilterSensitiveLog,
  ResourceNotFoundException: () => ResourceNotFoundException,
  SearchForPositionResultFilterSensitiveLog: () => SearchForPositionResultFilterSensitiveLog,
  SearchForTextResultFilterSensitiveLog: () => SearchForTextResultFilterSensitiveLog,
  SearchPlaceIndexForPositionCommand: () => SearchPlaceIndexForPositionCommand,
  SearchPlaceIndexForPositionRequestFilterSensitiveLog: () => SearchPlaceIndexForPositionRequestFilterSensitiveLog,
  SearchPlaceIndexForPositionResponseFilterSensitiveLog: () => SearchPlaceIndexForPositionResponseFilterSensitiveLog,
  SearchPlaceIndexForPositionSummaryFilterSensitiveLog: () => SearchPlaceIndexForPositionSummaryFilterSensitiveLog,
  SearchPlaceIndexForSuggestionsCommand: () => SearchPlaceIndexForSuggestionsCommand,
  SearchPlaceIndexForSuggestionsRequestFilterSensitiveLog: () => SearchPlaceIndexForSuggestionsRequestFilterSensitiveLog,
  SearchPlaceIndexForSuggestionsResponseFilterSensitiveLog: () => SearchPlaceIndexForSuggestionsResponseFilterSensitiveLog,
  SearchPlaceIndexForSuggestionsSummaryFilterSensitiveLog: () => SearchPlaceIndexForSuggestionsSummaryFilterSensitiveLog,
  SearchPlaceIndexForTextCommand: () => SearchPlaceIndexForTextCommand,
  SearchPlaceIndexForTextRequestFilterSensitiveLog: () => SearchPlaceIndexForTextRequestFilterSensitiveLog,
  SearchPlaceIndexForTextResponseFilterSensitiveLog: () => SearchPlaceIndexForTextResponseFilterSensitiveLog,
  SearchPlaceIndexForTextSummaryFilterSensitiveLog: () => SearchPlaceIndexForTextSummaryFilterSensitiveLog,
  ServiceQuotaExceededException: () => ServiceQuotaExceededException,
  StepFilterSensitiveLog: () => StepFilterSensitiveLog,
  TagResourceCommand: () => TagResourceCommand,
  ThrottlingException: () => ThrottlingException,
  TrackingFilterGeometryFilterSensitiveLog: () => TrackingFilterGeometryFilterSensitiveLog,
  UntagResourceCommand: () => UntagResourceCommand,
  UpdateGeofenceCollectionCommand: () => UpdateGeofenceCollectionCommand,
  UpdateKeyCommand: () => UpdateKeyCommand,
  UpdateMapCommand: () => UpdateMapCommand,
  UpdatePlaceIndexCommand: () => UpdatePlaceIndexCommand,
  UpdateRouteCalculatorCommand: () => UpdateRouteCalculatorCommand,
  UpdateTrackerCommand: () => UpdateTrackerCommand,
  ValidationException: () => ValidationException,
  VerifyDevicePositionCommand: () => VerifyDevicePositionCommand,
  VerifyDevicePositionRequestFilterSensitiveLog: () => VerifyDevicePositionRequestFilterSensitiveLog,
  VerifyDevicePositionResponseFilterSensitiveLog: () => VerifyDevicePositionResponseFilterSensitiveLog,
  __Client: () => import_smithy_client.Client,
  paginateForecastGeofenceEvents: () => paginateForecastGeofenceEvents,
  paginateGetDevicePositionHistory: () => paginateGetDevicePositionHistory,
  paginateListDevicePositions: () => paginateListDevicePositions,
  paginateListGeofenceCollections: () => paginateListGeofenceCollections,
  paginateListGeofences: () => paginateListGeofences,
  paginateListKeys: () => paginateListKeys,
  paginateListMaps: () => paginateListMaps,
  paginateListPlaceIndexes: () => paginateListPlaceIndexes,
  paginateListRouteCalculators: () => paginateListRouteCalculators,
  paginateListTrackerConsumers: () => paginateListTrackerConsumers,
  paginateListTrackers: () => paginateListTrackers
});
module.exports = __toCommonJS(src_exports);

// src/LocationClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "geo"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/LocationClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/LocationClient.ts
var _LocationClient = class _LocationClient extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
    const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
    const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultLocationHttpAuthSchemeParametersProvider,
        identityProviderConfigProvider: async (config) => new import_core.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        })
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
};
__name(_LocationClient, "LocationClient");
var LocationClient = _LocationClient;

// src/Location.ts


// src/commands/AssociateTrackerConsumerCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");


// src/protocols/Aws_restJson1.ts
var import_core2 = require("@aws-sdk/core");




// src/models/LocationServiceException.ts

var _LocationServiceException = class _LocationServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _LocationServiceException.prototype);
  }
};
__name(_LocationServiceException, "LocationServiceException");
var LocationServiceException = _LocationServiceException;

// src/models/models_0.ts

var _AccessDeniedException = class _AccessDeniedException extends LocationServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "AccessDeniedException",
      $fault: "client",
      ...opts
    });
    this.name = "AccessDeniedException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _AccessDeniedException.prototype);
    this.Message = opts.Message;
  }
};
__name(_AccessDeniedException, "AccessDeniedException");
var AccessDeniedException = _AccessDeniedException;
var _ConflictException = class _ConflictException extends LocationServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ConflictException",
      $fault: "client",
      ...opts
    });
    this.name = "ConflictException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ConflictException.prototype);
    this.Message = opts.Message;
  }
};
__name(_ConflictException, "ConflictException");
var ConflictException = _ConflictException;
var _InternalServerException = class _InternalServerException extends LocationServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalServerException",
      $fault: "server",
      ...opts
    });
    this.name = "InternalServerException";
    this.$fault = "server";
    this.$retryable = {};
    Object.setPrototypeOf(this, _InternalServerException.prototype);
    this.Message = opts.Message;
  }
};
__name(_InternalServerException, "InternalServerException");
var InternalServerException = _InternalServerException;
var _ServiceQuotaExceededException = class _ServiceQuotaExceededException extends LocationServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServiceQuotaExceededException",
      $fault: "client",
      ...opts
    });
    this.name = "ServiceQuotaExceededException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ServiceQuotaExceededException.prototype);
    this.Message = opts.Message;
  }
};
__name(_ServiceQuotaExceededException, "ServiceQuotaExceededException");
var ServiceQuotaExceededException = _ServiceQuotaExceededException;
var _ThrottlingException = class _ThrottlingException extends LocationServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ThrottlingException",
      $fault: "client",
      ...opts
    });
    this.name = "ThrottlingException";
    this.$fault = "client";
    this.$retryable = {};
    Object.setPrototypeOf(this, _ThrottlingException.prototype);
    this.Message = opts.Message;
  }
};
__name(_ThrottlingException, "ThrottlingException");
var ThrottlingException = _ThrottlingException;
var _ValidationException = class _ValidationException extends LocationServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ValidationException",
      $fault: "client",
      ...opts
    });
    this.name = "ValidationException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ValidationException.prototype);
    this.Message = opts.Message;
    this.Reason = opts.Reason;
    this.FieldList = opts.FieldList;
  }
};
__name(_ValidationException, "ValidationException");
var ValidationException = _ValidationException;
var _ResourceNotFoundException = class _ResourceNotFoundException extends LocationServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ResourceNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "ResourceNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
    this.Message = opts.Message;
  }
};
__name(_ResourceNotFoundException, "ResourceNotFoundException");
var ResourceNotFoundException = _ResourceNotFoundException;
var CreateKeyResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Key && { Key: import_smithy_client.SENSITIVE_STRING }
}), "CreateKeyResponseFilterSensitiveLog");
var DescribeKeyResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Key && { Key: import_smithy_client.SENSITIVE_STRING }
}), "DescribeKeyResponseFilterSensitiveLog");
var DevicePositionUpdateFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Position && { Position: import_smithy_client.SENSITIVE_STRING },
  ...obj.PositionProperties && { PositionProperties: import_smithy_client.SENSITIVE_STRING }
}), "DevicePositionUpdateFilterSensitiveLog");
var BatchEvaluateGeofencesRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.DevicePositionUpdates && {
    DevicePositionUpdates: obj.DevicePositionUpdates.map((item) => DevicePositionUpdateFilterSensitiveLog(item))
  }
}), "BatchEvaluateGeofencesRequestFilterSensitiveLog");
var DevicePositionFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Position && { Position: import_smithy_client.SENSITIVE_STRING },
  ...obj.PositionProperties && { PositionProperties: import_smithy_client.SENSITIVE_STRING }
}), "DevicePositionFilterSensitiveLog");
var BatchGetDevicePositionResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.DevicePositions && {
    DevicePositions: obj.DevicePositions.map((item) => DevicePositionFilterSensitiveLog(item))
  }
}), "BatchGetDevicePositionResponseFilterSensitiveLog");
var CircleFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Center && { Center: import_smithy_client.SENSITIVE_STRING }
}), "CircleFilterSensitiveLog");
var GeofenceGeometryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Polygon && { Polygon: obj.Polygon.map((item) => import_smithy_client.SENSITIVE_STRING) },
  ...obj.Circle && { Circle: import_smithy_client.SENSITIVE_STRING },
  ...obj.Geobuf && { Geobuf: import_smithy_client.SENSITIVE_STRING }
}), "GeofenceGeometryFilterSensitiveLog");
var BatchPutGeofenceRequestEntryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Geometry && { Geometry: GeofenceGeometryFilterSensitiveLog(obj.Geometry) },
  ...obj.GeofenceProperties && { GeofenceProperties: import_smithy_client.SENSITIVE_STRING }
}), "BatchPutGeofenceRequestEntryFilterSensitiveLog");
var BatchPutGeofenceRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Entries && { Entries: obj.Entries.map((item) => BatchPutGeofenceRequestEntryFilterSensitiveLog(item)) }
}), "BatchPutGeofenceRequestFilterSensitiveLog");
var BatchUpdateDevicePositionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Updates && { Updates: obj.Updates.map((item) => DevicePositionUpdateFilterSensitiveLog(item)) }
}), "BatchUpdateDevicePositionRequestFilterSensitiveLog");
var CalculateRouteRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.DeparturePosition && { DeparturePosition: import_smithy_client.SENSITIVE_STRING },
  ...obj.DestinationPosition && { DestinationPosition: import_smithy_client.SENSITIVE_STRING },
  ...obj.WaypointPositions && { WaypointPositions: import_smithy_client.SENSITIVE_STRING },
  ...obj.Key && { Key: import_smithy_client.SENSITIVE_STRING }
}), "CalculateRouteRequestFilterSensitiveLog");
var LegGeometryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.LineString && { LineString: import_smithy_client.SENSITIVE_STRING }
}), "LegGeometryFilterSensitiveLog");
var StepFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.StartPosition && { StartPosition: import_smithy_client.SENSITIVE_STRING },
  ...obj.EndPosition && { EndPosition: import_smithy_client.SENSITIVE_STRING }
}), "StepFilterSensitiveLog");
var LegFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.StartPosition && { StartPosition: import_smithy_client.SENSITIVE_STRING },
  ...obj.EndPosition && { EndPosition: import_smithy_client.SENSITIVE_STRING },
  ...obj.Geometry && { Geometry: LegGeometryFilterSensitiveLog(obj.Geometry) },
  ...obj.Steps && { Steps: obj.Steps.map((item) => StepFilterSensitiveLog(item)) }
}), "LegFilterSensitiveLog");
var CalculateRouteSummaryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.RouteBBox && { RouteBBox: import_smithy_client.SENSITIVE_STRING }
}), "CalculateRouteSummaryFilterSensitiveLog");
var CalculateRouteResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Legs && { Legs: obj.Legs.map((item) => LegFilterSensitiveLog(item)) },
  ...obj.Summary && { Summary: CalculateRouteSummaryFilterSensitiveLog(obj.Summary) }
}), "CalculateRouteResponseFilterSensitiveLog");
var CalculateRouteMatrixRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.DeparturePositions && { DeparturePositions: import_smithy_client.SENSITIVE_STRING },
  ...obj.DestinationPositions && { DestinationPositions: import_smithy_client.SENSITIVE_STRING },
  ...obj.Key && { Key: import_smithy_client.SENSITIVE_STRING }
}), "CalculateRouteMatrixRequestFilterSensitiveLog");
var CalculateRouteMatrixResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.SnappedDeparturePositions && { SnappedDeparturePositions: import_smithy_client.SENSITIVE_STRING },
  ...obj.SnappedDestinationPositions && { SnappedDestinationPositions: import_smithy_client.SENSITIVE_STRING }
}), "CalculateRouteMatrixResponseFilterSensitiveLog");
var DeviceStateFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Position && { Position: import_smithy_client.SENSITIVE_STRING }
}), "DeviceStateFilterSensitiveLog");
var ForecastedEventFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.GeofenceProperties && { GeofenceProperties: import_smithy_client.SENSITIVE_STRING }
}), "ForecastedEventFilterSensitiveLog");
var ForecastGeofenceEventsDeviceStateFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Position && { Position: import_smithy_client.SENSITIVE_STRING }
}), "ForecastGeofenceEventsDeviceStateFilterSensitiveLog");
var ForecastGeofenceEventsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.DeviceState && { DeviceState: ForecastGeofenceEventsDeviceStateFilterSensitiveLog(obj.DeviceState) }
}), "ForecastGeofenceEventsRequestFilterSensitiveLog");
var ForecastGeofenceEventsResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.ForecastedEvents && {
    ForecastedEvents: obj.ForecastedEvents.map((item) => ForecastedEventFilterSensitiveLog(item))
  }
}), "ForecastGeofenceEventsResponseFilterSensitiveLog");
var GetGeofenceResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Geometry && { Geometry: GeofenceGeometryFilterSensitiveLog(obj.Geometry) },
  ...obj.GeofenceProperties && { GeofenceProperties: import_smithy_client.SENSITIVE_STRING }
}), "GetGeofenceResponseFilterSensitiveLog");
var ListGeofenceResponseEntryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Geometry && { Geometry: GeofenceGeometryFilterSensitiveLog(obj.Geometry) },
  ...obj.GeofenceProperties && { GeofenceProperties: import_smithy_client.SENSITIVE_STRING }
}), "ListGeofenceResponseEntryFilterSensitiveLog");
var ListGeofencesResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Entries && { Entries: obj.Entries.map((item) => ListGeofenceResponseEntryFilterSensitiveLog(item)) }
}), "ListGeofencesResponseFilterSensitiveLog");
var PutGeofenceRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Geometry && { Geometry: GeofenceGeometryFilterSensitiveLog(obj.Geometry) },
  ...obj.GeofenceProperties && { GeofenceProperties: import_smithy_client.SENSITIVE_STRING }
}), "PutGeofenceRequestFilterSensitiveLog");
var GetDevicePositionResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Position && { Position: import_smithy_client.SENSITIVE_STRING },
  ...obj.PositionProperties && { PositionProperties: import_smithy_client.SENSITIVE_STRING }
}), "GetDevicePositionResponseFilterSensitiveLog");
var GetDevicePositionHistoryResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.DevicePositions && {
    DevicePositions: obj.DevicePositions.map((item) => DevicePositionFilterSensitiveLog(item))
  }
}), "GetDevicePositionHistoryResponseFilterSensitiveLog");
var GetMapGlyphsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Key && { Key: import_smithy_client.SENSITIVE_STRING }
}), "GetMapGlyphsRequestFilterSensitiveLog");
var GetMapSpritesRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Key && { Key: import_smithy_client.SENSITIVE_STRING }
}), "GetMapSpritesRequestFilterSensitiveLog");
var GetMapStyleDescriptorRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Key && { Key: import_smithy_client.SENSITIVE_STRING }
}), "GetMapStyleDescriptorRequestFilterSensitiveLog");
var GetMapTileRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Key && { Key: import_smithy_client.SENSITIVE_STRING }
}), "GetMapTileRequestFilterSensitiveLog");
var GetPlaceRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Key && { Key: import_smithy_client.SENSITIVE_STRING }
}), "GetPlaceRequestFilterSensitiveLog");
var PlaceGeometryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Point && { Point: import_smithy_client.SENSITIVE_STRING }
}), "PlaceGeometryFilterSensitiveLog");
var PlaceFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Geometry && { Geometry: PlaceGeometryFilterSensitiveLog(obj.Geometry) }
}), "PlaceFilterSensitiveLog");
var GetPlaceResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Place && { Place: PlaceFilterSensitiveLog(obj.Place) }
}), "GetPlaceResponseFilterSensitiveLog");
var InferredStateFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Position && { Position: import_smithy_client.SENSITIVE_STRING }
}), "InferredStateFilterSensitiveLog");
var TrackingFilterGeometryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Polygon && { Polygon: obj.Polygon.map((item) => import_smithy_client.SENSITIVE_STRING) }
}), "TrackingFilterGeometryFilterSensitiveLog");
var ListDevicePositionsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.FilterGeometry && { FilterGeometry: TrackingFilterGeometryFilterSensitiveLog(obj.FilterGeometry) }
}), "ListDevicePositionsRequestFilterSensitiveLog");
var ListDevicePositionsResponseEntryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Position && { Position: import_smithy_client.SENSITIVE_STRING },
  ...obj.PositionProperties && { PositionProperties: import_smithy_client.SENSITIVE_STRING }
}), "ListDevicePositionsResponseEntryFilterSensitiveLog");
var ListDevicePositionsResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Entries && { Entries: obj.Entries.map((item) => ListDevicePositionsResponseEntryFilterSensitiveLog(item)) }
}), "ListDevicePositionsResponseFilterSensitiveLog");
var SearchPlaceIndexForPositionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Position && { Position: import_smithy_client.SENSITIVE_STRING },
  ...obj.Key && { Key: import_smithy_client.SENSITIVE_STRING }
}), "SearchPlaceIndexForPositionRequestFilterSensitiveLog");
var SearchForPositionResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Place && { Place: PlaceFilterSensitiveLog(obj.Place) }
}), "SearchForPositionResultFilterSensitiveLog");
var SearchPlaceIndexForPositionSummaryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Position && { Position: import_smithy_client.SENSITIVE_STRING }
}), "SearchPlaceIndexForPositionSummaryFilterSensitiveLog");
var SearchPlaceIndexForPositionResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Summary && { Summary: SearchPlaceIndexForPositionSummaryFilterSensitiveLog(obj.Summary) },
  ...obj.Results && { Results: obj.Results.map((item) => SearchForPositionResultFilterSensitiveLog(item)) }
}), "SearchPlaceIndexForPositionResponseFilterSensitiveLog");
var SearchPlaceIndexForSuggestionsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Text && { Text: import_smithy_client.SENSITIVE_STRING },
  ...obj.BiasPosition && { BiasPosition: import_smithy_client.SENSITIVE_STRING },
  ...obj.FilterBBox && { FilterBBox: import_smithy_client.SENSITIVE_STRING },
  ...obj.Key && { Key: import_smithy_client.SENSITIVE_STRING }
}), "SearchPlaceIndexForSuggestionsRequestFilterSensitiveLog");
var SearchPlaceIndexForSuggestionsSummaryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Text && { Text: import_smithy_client.SENSITIVE_STRING },
  ...obj.BiasPosition && { BiasPosition: import_smithy_client.SENSITIVE_STRING },
  ...obj.FilterBBox && { FilterBBox: import_smithy_client.SENSITIVE_STRING }
}), "SearchPlaceIndexForSuggestionsSummaryFilterSensitiveLog");
var SearchPlaceIndexForSuggestionsResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Summary && { Summary: SearchPlaceIndexForSuggestionsSummaryFilterSensitiveLog(obj.Summary) }
}), "SearchPlaceIndexForSuggestionsResponseFilterSensitiveLog");
var SearchPlaceIndexForTextRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Text && { Text: import_smithy_client.SENSITIVE_STRING },
  ...obj.BiasPosition && { BiasPosition: import_smithy_client.SENSITIVE_STRING },
  ...obj.FilterBBox && { FilterBBox: import_smithy_client.SENSITIVE_STRING },
  ...obj.Key && { Key: import_smithy_client.SENSITIVE_STRING }
}), "SearchPlaceIndexForTextRequestFilterSensitiveLog");
var SearchForTextResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Place && { Place: PlaceFilterSensitiveLog(obj.Place) }
}), "SearchForTextResultFilterSensitiveLog");
var SearchPlaceIndexForTextSummaryFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Text && { Text: import_smithy_client.SENSITIVE_STRING },
  ...obj.BiasPosition && { BiasPosition: import_smithy_client.SENSITIVE_STRING },
  ...obj.FilterBBox && { FilterBBox: import_smithy_client.SENSITIVE_STRING },
  ...obj.ResultBBox && { ResultBBox: import_smithy_client.SENSITIVE_STRING }
}), "SearchPlaceIndexForTextSummaryFilterSensitiveLog");
var SearchPlaceIndexForTextResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Summary && { Summary: SearchPlaceIndexForTextSummaryFilterSensitiveLog(obj.Summary) },
  ...obj.Results && { Results: obj.Results.map((item) => SearchForTextResultFilterSensitiveLog(item)) }
}), "SearchPlaceIndexForTextResponseFilterSensitiveLog");
var VerifyDevicePositionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.DeviceState && { DeviceState: DeviceStateFilterSensitiveLog(obj.DeviceState) }
}), "VerifyDevicePositionRequestFilterSensitiveLog");
var VerifyDevicePositionResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.InferredState && { InferredState: InferredStateFilterSensitiveLog(obj.InferredState) }
}), "VerifyDevicePositionResponseFilterSensitiveLog");

// src/protocols/Aws_restJson1.ts
var se_AssociateTrackerConsumerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tracking/v0/trackers/{TrackerName}/consumers");
  b.p("TrackerName", () => input.TrackerName, "{TrackerName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      ConsumerArn: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.tracking." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_AssociateTrackerConsumerCommand");
var se_BatchDeleteDevicePositionHistoryCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tracking/v0/trackers/{TrackerName}/delete-positions");
  b.p("TrackerName", () => input.TrackerName, "{TrackerName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      DeviceIds: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "tracking." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchDeleteDevicePositionHistoryCommand");
var se_BatchDeleteGeofenceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/geofencing/v0/collections/{CollectionName}/delete-geofences");
  b.p("CollectionName", () => input.CollectionName, "{CollectionName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      GeofenceIds: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "geofencing." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchDeleteGeofenceCommand");
var se_BatchEvaluateGeofencesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/geofencing/v0/collections/{CollectionName}/positions");
  b.p("CollectionName", () => input.CollectionName, "{CollectionName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      DevicePositionUpdates: (_) => se_DevicePositionUpdateList(_, context)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "geofencing." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchEvaluateGeofencesCommand");
var se_BatchGetDevicePositionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tracking/v0/trackers/{TrackerName}/get-positions");
  b.p("TrackerName", () => input.TrackerName, "{TrackerName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      DeviceIds: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "tracking." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchGetDevicePositionCommand");
var se_BatchPutGeofenceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/geofencing/v0/collections/{CollectionName}/put-geofences");
  b.p("CollectionName", () => input.CollectionName, "{CollectionName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Entries: (_) => se_BatchPutGeofenceRequestEntryList(_, context)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "geofencing." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchPutGeofenceCommand");
var se_BatchUpdateDevicePositionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tracking/v0/trackers/{TrackerName}/positions");
  b.p("TrackerName", () => input.TrackerName, "{TrackerName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Updates: (_) => se_DevicePositionUpdateList(_, context)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "tracking." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchUpdateDevicePositionCommand");
var se_CalculateRouteCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/routes/v0/calculators/{CalculatorName}/calculate/route");
  b.p("CalculatorName", () => input.CalculatorName, "{CalculatorName}", false);
  const query = (0, import_smithy_client.map)({
    [_k]: [, input[_K]]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      ArrivalTime: (_) => (0, import_smithy_client.serializeDateTime)(_),
      CarModeOptions: (_) => (0, import_smithy_client._json)(_),
      DepartNow: [],
      DeparturePosition: (_) => se_Position(_, context),
      DepartureTime: (_) => (0, import_smithy_client.serializeDateTime)(_),
      DestinationPosition: (_) => se_Position(_, context),
      DistanceUnit: [],
      IncludeLegGeometry: [],
      OptimizeFor: [],
      TravelMode: [],
      TruckModeOptions: (_) => se_CalculateRouteTruckModeOptions(_, context),
      WaypointPositions: (_) => se_WaypointPositionList(_, context)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "routes." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_CalculateRouteCommand");
var se_CalculateRouteMatrixCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/routes/v0/calculators/{CalculatorName}/calculate/route-matrix");
  b.p("CalculatorName", () => input.CalculatorName, "{CalculatorName}", false);
  const query = (0, import_smithy_client.map)({
    [_k]: [, input[_K]]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      CarModeOptions: (_) => (0, import_smithy_client._json)(_),
      DepartNow: [],
      DeparturePositions: (_) => se_PositionList(_, context),
      DepartureTime: (_) => (0, import_smithy_client.serializeDateTime)(_),
      DestinationPositions: (_) => se_PositionList(_, context),
      DistanceUnit: [],
      TravelMode: [],
      TruckModeOptions: (_) => se_CalculateRouteTruckModeOptions(_, context)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "routes." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_CalculateRouteMatrixCommand");
var se_CreateGeofenceCollectionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/geofencing/v0/collections");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      CollectionName: [],
      Description: [],
      KmsKeyId: [],
      PricingPlan: [],
      PricingPlanDataSource: [],
      Tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.geofencing." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateGeofenceCollectionCommand");
var se_CreateKeyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/metadata/v0/keys");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Description: [],
      ExpireTime: (_) => (0, import_smithy_client.serializeDateTime)(_),
      KeyName: [],
      NoExpiry: [],
      Restrictions: (_) => (0, import_smithy_client._json)(_),
      Tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.metadata." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateKeyCommand");
var se_CreateMapCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/maps/v0/maps");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Configuration: (_) => (0, import_smithy_client._json)(_),
      Description: [],
      MapName: [],
      PricingPlan: [],
      Tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.maps." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateMapCommand");
var se_CreatePlaceIndexCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/places/v0/indexes");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      DataSource: [],
      DataSourceConfiguration: (_) => (0, import_smithy_client._json)(_),
      Description: [],
      IndexName: [],
      PricingPlan: [],
      Tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.places." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreatePlaceIndexCommand");
var se_CreateRouteCalculatorCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/routes/v0/calculators");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      CalculatorName: [],
      DataSource: [],
      Description: [],
      PricingPlan: [],
      Tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.routes." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateRouteCalculatorCommand");
var se_CreateTrackerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tracking/v0/trackers");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Description: [],
      EventBridgeEnabled: [],
      KmsKeyEnableGeospatialQueries: [],
      KmsKeyId: [],
      PositionFiltering: [],
      PricingPlan: [],
      PricingPlanDataSource: [],
      Tags: (_) => (0, import_smithy_client._json)(_),
      TrackerName: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.tracking." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateTrackerCommand");
var se_DeleteGeofenceCollectionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/geofencing/v0/collections/{CollectionName}");
  b.p("CollectionName", () => input.CollectionName, "{CollectionName}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.geofencing." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteGeofenceCollectionCommand");
var se_DeleteKeyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/metadata/v0/keys/{KeyName}");
  b.p("KeyName", () => input.KeyName, "{KeyName}", false);
  const query = (0, import_smithy_client.map)({
    [_fD]: [() => input.ForceDelete !== void 0, () => input[_FD].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.metadata." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteKeyCommand");
var se_DeleteMapCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/maps/v0/maps/{MapName}");
  b.p("MapName", () => input.MapName, "{MapName}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.maps." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteMapCommand");
var se_DeletePlaceIndexCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/places/v0/indexes/{IndexName}");
  b.p("IndexName", () => input.IndexName, "{IndexName}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.places." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeletePlaceIndexCommand");
var se_DeleteRouteCalculatorCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/routes/v0/calculators/{CalculatorName}");
  b.p("CalculatorName", () => input.CalculatorName, "{CalculatorName}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.routes." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteRouteCalculatorCommand");
var se_DeleteTrackerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tracking/v0/trackers/{TrackerName}");
  b.p("TrackerName", () => input.TrackerName, "{TrackerName}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.tracking." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteTrackerCommand");
var se_DescribeGeofenceCollectionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/geofencing/v0/collections/{CollectionName}");
  b.p("CollectionName", () => input.CollectionName, "{CollectionName}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.geofencing." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeGeofenceCollectionCommand");
var se_DescribeKeyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/metadata/v0/keys/{KeyName}");
  b.p("KeyName", () => input.KeyName, "{KeyName}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.metadata." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeKeyCommand");
var se_DescribeMapCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/maps/v0/maps/{MapName}");
  b.p("MapName", () => input.MapName, "{MapName}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.maps." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeMapCommand");
var se_DescribePlaceIndexCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/places/v0/indexes/{IndexName}");
  b.p("IndexName", () => input.IndexName, "{IndexName}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.places." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribePlaceIndexCommand");
var se_DescribeRouteCalculatorCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/routes/v0/calculators/{CalculatorName}");
  b.p("CalculatorName", () => input.CalculatorName, "{CalculatorName}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.routes." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeRouteCalculatorCommand");
var se_DescribeTrackerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tracking/v0/trackers/{TrackerName}");
  b.p("TrackerName", () => input.TrackerName, "{TrackerName}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.tracking." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeTrackerCommand");
var se_DisassociateTrackerConsumerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tracking/v0/trackers/{TrackerName}/consumers/{ConsumerArn}");
  b.p("TrackerName", () => input.TrackerName, "{TrackerName}", false);
  b.p("ConsumerArn", () => input.ConsumerArn, "{ConsumerArn}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.tracking." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DisassociateTrackerConsumerCommand");
var se_ForecastGeofenceEventsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/geofencing/v0/collections/{CollectionName}/forecast-geofence-events");
  b.p("CollectionName", () => input.CollectionName, "{CollectionName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      DeviceState: (_) => se_ForecastGeofenceEventsDeviceState(_, context),
      DistanceUnit: [],
      MaxResults: [],
      NextToken: [],
      SpeedUnit: [],
      TimeHorizonMinutes: (_) => (0, import_smithy_client.serializeFloat)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "geofencing." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ForecastGeofenceEventsCommand");
var se_GetDevicePositionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tracking/v0/trackers/{TrackerName}/devices/{DeviceId}/positions/latest");
  b.p("TrackerName", () => input.TrackerName, "{TrackerName}", false);
  b.p("DeviceId", () => input.DeviceId, "{DeviceId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "tracking." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetDevicePositionCommand");
var se_GetDevicePositionHistoryCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tracking/v0/trackers/{TrackerName}/devices/{DeviceId}/list-positions");
  b.p("TrackerName", () => input.TrackerName, "{TrackerName}", false);
  b.p("DeviceId", () => input.DeviceId, "{DeviceId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      EndTimeExclusive: (_) => (0, import_smithy_client.serializeDateTime)(_),
      MaxResults: [],
      NextToken: [],
      StartTimeInclusive: (_) => (0, import_smithy_client.serializeDateTime)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "tracking." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GetDevicePositionHistoryCommand");
var se_GetGeofenceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/geofencing/v0/collections/{CollectionName}/geofences/{GeofenceId}");
  b.p("CollectionName", () => input.CollectionName, "{CollectionName}", false);
  b.p("GeofenceId", () => input.GeofenceId, "{GeofenceId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "geofencing." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetGeofenceCommand");
var se_GetMapGlyphsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/maps/v0/maps/{MapName}/glyphs/{FontStack}/{FontUnicodeRange}");
  b.p("MapName", () => input.MapName, "{MapName}", false);
  b.p("FontStack", () => input.FontStack, "{FontStack}", false);
  b.p("FontUnicodeRange", () => input.FontUnicodeRange, "{FontUnicodeRange}", false);
  const query = (0, import_smithy_client.map)({
    [_k]: [, input[_K]]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "maps." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetMapGlyphsCommand");
var se_GetMapSpritesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/maps/v0/maps/{MapName}/sprites/{FileName}");
  b.p("MapName", () => input.MapName, "{MapName}", false);
  b.p("FileName", () => input.FileName, "{FileName}", false);
  const query = (0, import_smithy_client.map)({
    [_k]: [, input[_K]]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "maps." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetMapSpritesCommand");
var se_GetMapStyleDescriptorCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/maps/v0/maps/{MapName}/style-descriptor");
  b.p("MapName", () => input.MapName, "{MapName}", false);
  const query = (0, import_smithy_client.map)({
    [_k]: [, input[_K]]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "maps." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetMapStyleDescriptorCommand");
var se_GetMapTileCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/maps/v0/maps/{MapName}/tiles/{Z}/{X}/{Y}");
  b.p("MapName", () => input.MapName, "{MapName}", false);
  b.p("Z", () => input.Z, "{Z}", false);
  b.p("X", () => input.X, "{X}", false);
  b.p("Y", () => input.Y, "{Y}", false);
  const query = (0, import_smithy_client.map)({
    [_k]: [, input[_K]]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "maps." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetMapTileCommand");
var se_GetPlaceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/places/v0/indexes/{IndexName}/places/{PlaceId}");
  b.p("IndexName", () => input.IndexName, "{IndexName}", false);
  b.p("PlaceId", () => input.PlaceId, "{PlaceId}", false);
  const query = (0, import_smithy_client.map)({
    [_l]: [, input[_L]],
    [_k]: [, input[_K]]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "places." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetPlaceCommand");
var se_ListDevicePositionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tracking/v0/trackers/{TrackerName}/list-positions");
  b.p("TrackerName", () => input.TrackerName, "{TrackerName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      FilterGeometry: (_) => se_TrackingFilterGeometry(_, context),
      MaxResults: [],
      NextToken: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "tracking." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListDevicePositionsCommand");
var se_ListGeofenceCollectionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/geofencing/v0/list-collections");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      MaxResults: [],
      NextToken: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.geofencing." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListGeofenceCollectionsCommand");
var se_ListGeofencesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/geofencing/v0/collections/{CollectionName}/list-geofences");
  b.p("CollectionName", () => input.CollectionName, "{CollectionName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      MaxResults: [],
      NextToken: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "geofencing." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListGeofencesCommand");
var se_ListKeysCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/metadata/v0/list-keys");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Filter: (_) => (0, import_smithy_client._json)(_),
      MaxResults: [],
      NextToken: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.metadata." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListKeysCommand");
var se_ListMapsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/maps/v0/list-maps");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      MaxResults: [],
      NextToken: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.maps." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListMapsCommand");
var se_ListPlaceIndexesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/places/v0/list-indexes");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      MaxResults: [],
      NextToken: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.places." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListPlaceIndexesCommand");
var se_ListRouteCalculatorsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/routes/v0/list-calculators");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      MaxResults: [],
      NextToken: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.routes." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListRouteCalculatorsCommand");
var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tags/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.metadata." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_ListTagsForResourceCommand");
var se_ListTrackerConsumersCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tracking/v0/trackers/{TrackerName}/list-consumers");
  b.p("TrackerName", () => input.TrackerName, "{TrackerName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      MaxResults: [],
      NextToken: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.tracking." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListTrackerConsumersCommand");
var se_ListTrackersCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tracking/v0/list-trackers");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      MaxResults: [],
      NextToken: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.tracking." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListTrackersCommand");
var se_PutGeofenceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/geofencing/v0/collections/{CollectionName}/geofences/{GeofenceId}");
  b.p("CollectionName", () => input.CollectionName, "{CollectionName}", false);
  b.p("GeofenceId", () => input.GeofenceId, "{GeofenceId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      GeofenceProperties: (_) => (0, import_smithy_client._json)(_),
      Geometry: (_) => se_GeofenceGeometry(_, context)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "geofencing." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_PutGeofenceCommand");
var se_SearchPlaceIndexForPositionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/places/v0/indexes/{IndexName}/search/position");
  b.p("IndexName", () => input.IndexName, "{IndexName}", false);
  const query = (0, import_smithy_client.map)({
    [_k]: [, input[_K]]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Language: [],
      MaxResults: [],
      Position: (_) => se_Position(_, context)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "places." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_SearchPlaceIndexForPositionCommand");
var se_SearchPlaceIndexForSuggestionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/places/v0/indexes/{IndexName}/search/suggestions");
  b.p("IndexName", () => input.IndexName, "{IndexName}", false);
  const query = (0, import_smithy_client.map)({
    [_k]: [, input[_K]]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      BiasPosition: (_) => se_Position(_, context),
      FilterBBox: (_) => se_BoundingBox(_, context),
      FilterCategories: (_) => (0, import_smithy_client._json)(_),
      FilterCountries: (_) => (0, import_smithy_client._json)(_),
      Language: [],
      MaxResults: [],
      Text: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "places." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_SearchPlaceIndexForSuggestionsCommand");
var se_SearchPlaceIndexForTextCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/places/v0/indexes/{IndexName}/search/text");
  b.p("IndexName", () => input.IndexName, "{IndexName}", false);
  const query = (0, import_smithy_client.map)({
    [_k]: [, input[_K]]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      BiasPosition: (_) => se_Position(_, context),
      FilterBBox: (_) => se_BoundingBox(_, context),
      FilterCategories: (_) => (0, import_smithy_client._json)(_),
      FilterCountries: (_) => (0, import_smithy_client._json)(_),
      Language: [],
      MaxResults: [],
      Text: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "places." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_SearchPlaceIndexForTextCommand");
var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tags/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.metadata." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_TagResourceCommand");
var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tags/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  const query = (0, import_smithy_client.map)({
    [_tK]: [(0, import_smithy_client.expectNonNull)(input.TagKeys, `TagKeys`) != null, () => input[_TK] || []]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.metadata." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_UntagResourceCommand");
var se_UpdateGeofenceCollectionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/geofencing/v0/collections/{CollectionName}");
  b.p("CollectionName", () => input.CollectionName, "{CollectionName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Description: [],
      PricingPlan: [],
      PricingPlanDataSource: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.geofencing." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateGeofenceCollectionCommand");
var se_UpdateKeyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/metadata/v0/keys/{KeyName}");
  b.p("KeyName", () => input.KeyName, "{KeyName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Description: [],
      ExpireTime: (_) => (0, import_smithy_client.serializeDateTime)(_),
      ForceUpdate: [],
      NoExpiry: [],
      Restrictions: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.metadata." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateKeyCommand");
var se_UpdateMapCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/maps/v0/maps/{MapName}");
  b.p("MapName", () => input.MapName, "{MapName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      ConfigurationUpdate: (_) => (0, import_smithy_client._json)(_),
      Description: [],
      PricingPlan: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.maps." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateMapCommand");
var se_UpdatePlaceIndexCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/places/v0/indexes/{IndexName}");
  b.p("IndexName", () => input.IndexName, "{IndexName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      DataSourceConfiguration: (_) => (0, import_smithy_client._json)(_),
      Description: [],
      PricingPlan: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.places." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdatePlaceIndexCommand");
var se_UpdateRouteCalculatorCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/routes/v0/calculators/{CalculatorName}");
  b.p("CalculatorName", () => input.CalculatorName, "{CalculatorName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Description: [],
      PricingPlan: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.routes." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateRouteCalculatorCommand");
var se_UpdateTrackerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tracking/v0/trackers/{TrackerName}");
  b.p("TrackerName", () => input.TrackerName, "{TrackerName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Description: [],
      EventBridgeEnabled: [],
      KmsKeyEnableGeospatialQueries: [],
      PositionFiltering: [],
      PricingPlan: [],
      PricingPlanDataSource: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "cp.tracking." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateTrackerCommand");
var se_VerifyDevicePositionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tracking/v0/trackers/{TrackerName}/positions/verify");
  b.p("TrackerName", () => input.TrackerName, "{TrackerName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      DeviceState: (_) => se_DeviceState(_, context),
      DistanceUnit: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "tracking." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_VerifyDevicePositionCommand");
var de_AssociateTrackerConsumerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_AssociateTrackerConsumerCommand");
var de_BatchDeleteDevicePositionHistoryCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Errors: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchDeleteDevicePositionHistoryCommand");
var de_BatchDeleteGeofenceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Errors: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchDeleteGeofenceCommand");
var de_BatchEvaluateGeofencesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Errors: (_) => de_BatchEvaluateGeofencesErrorList(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchEvaluateGeofencesCommand");
var de_BatchGetDevicePositionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    DevicePositions: (_) => de_DevicePositionList(_, context),
    Errors: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchGetDevicePositionCommand");
var de_BatchPutGeofenceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Errors: import_smithy_client._json,
    Successes: (_) => de_BatchPutGeofenceSuccessList(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchPutGeofenceCommand");
var de_BatchUpdateDevicePositionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Errors: (_) => de_BatchUpdateDevicePositionErrorList(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchUpdateDevicePositionCommand");
var de_CalculateRouteCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Legs: (_) => de_LegList(_, context),
    Summary: (_) => de_CalculateRouteSummary(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CalculateRouteCommand");
var de_CalculateRouteMatrixCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    RouteMatrix: (_) => de_RouteMatrix(_, context),
    SnappedDeparturePositions: (_) => de_PositionList(_, context),
    SnappedDestinationPositions: (_) => de_PositionList(_, context),
    Summary: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CalculateRouteMatrixCommand");
var de_CreateGeofenceCollectionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CollectionArn: import_smithy_client.expectString,
    CollectionName: import_smithy_client.expectString,
    CreateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateGeofenceCollectionCommand");
var de_CreateKeyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CreateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    Key: import_smithy_client.expectString,
    KeyArn: import_smithy_client.expectString,
    KeyName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateKeyCommand");
var de_CreateMapCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CreateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    MapArn: import_smithy_client.expectString,
    MapName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateMapCommand");
var de_CreatePlaceIndexCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CreateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    IndexArn: import_smithy_client.expectString,
    IndexName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreatePlaceIndexCommand");
var de_CreateRouteCalculatorCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CalculatorArn: import_smithy_client.expectString,
    CalculatorName: import_smithy_client.expectString,
    CreateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateRouteCalculatorCommand");
var de_CreateTrackerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CreateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    TrackerArn: import_smithy_client.expectString,
    TrackerName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateTrackerCommand");
var de_DeleteGeofenceCollectionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteGeofenceCollectionCommand");
var de_DeleteKeyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteKeyCommand");
var de_DeleteMapCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteMapCommand");
var de_DeletePlaceIndexCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeletePlaceIndexCommand");
var de_DeleteRouteCalculatorCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteRouteCalculatorCommand");
var de_DeleteTrackerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteTrackerCommand");
var de_DescribeGeofenceCollectionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CollectionArn: import_smithy_client.expectString,
    CollectionName: import_smithy_client.expectString,
    CreateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    Description: import_smithy_client.expectString,
    GeofenceCount: import_smithy_client.expectInt32,
    KmsKeyId: import_smithy_client.expectString,
    PricingPlan: import_smithy_client.expectString,
    PricingPlanDataSource: import_smithy_client.expectString,
    Tags: import_smithy_client._json,
    UpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeGeofenceCollectionCommand");
var de_DescribeKeyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CreateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    Description: import_smithy_client.expectString,
    ExpireTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    Key: import_smithy_client.expectString,
    KeyArn: import_smithy_client.expectString,
    KeyName: import_smithy_client.expectString,
    Restrictions: import_smithy_client._json,
    Tags: import_smithy_client._json,
    UpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeKeyCommand");
var de_DescribeMapCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Configuration: import_smithy_client._json,
    CreateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    DataSource: import_smithy_client.expectString,
    Description: import_smithy_client.expectString,
    MapArn: import_smithy_client.expectString,
    MapName: import_smithy_client.expectString,
    PricingPlan: import_smithy_client.expectString,
    Tags: import_smithy_client._json,
    UpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeMapCommand");
var de_DescribePlaceIndexCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CreateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    DataSource: import_smithy_client.expectString,
    DataSourceConfiguration: import_smithy_client._json,
    Description: import_smithy_client.expectString,
    IndexArn: import_smithy_client.expectString,
    IndexName: import_smithy_client.expectString,
    PricingPlan: import_smithy_client.expectString,
    Tags: import_smithy_client._json,
    UpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribePlaceIndexCommand");
var de_DescribeRouteCalculatorCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CalculatorArn: import_smithy_client.expectString,
    CalculatorName: import_smithy_client.expectString,
    CreateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    DataSource: import_smithy_client.expectString,
    Description: import_smithy_client.expectString,
    PricingPlan: import_smithy_client.expectString,
    Tags: import_smithy_client._json,
    UpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeRouteCalculatorCommand");
var de_DescribeTrackerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CreateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    Description: import_smithy_client.expectString,
    EventBridgeEnabled: import_smithy_client.expectBoolean,
    KmsKeyEnableGeospatialQueries: import_smithy_client.expectBoolean,
    KmsKeyId: import_smithy_client.expectString,
    PositionFiltering: import_smithy_client.expectString,
    PricingPlan: import_smithy_client.expectString,
    PricingPlanDataSource: import_smithy_client.expectString,
    Tags: import_smithy_client._json,
    TrackerArn: import_smithy_client.expectString,
    TrackerName: import_smithy_client.expectString,
    UpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeTrackerCommand");
var de_DisassociateTrackerConsumerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DisassociateTrackerConsumerCommand");
var de_ForecastGeofenceEventsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    DistanceUnit: import_smithy_client.expectString,
    ForecastedEvents: (_) => de_ForecastedEventsList(_, context),
    NextToken: import_smithy_client.expectString,
    SpeedUnit: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ForecastGeofenceEventsCommand");
var de_GetDevicePositionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Accuracy: (_) => de_PositionalAccuracy(_, context),
    DeviceId: import_smithy_client.expectString,
    Position: (_) => de_Position(_, context),
    PositionProperties: import_smithy_client._json,
    ReceivedTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    SampleTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetDevicePositionCommand");
var de_GetDevicePositionHistoryCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    DevicePositions: (_) => de_DevicePositionList(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetDevicePositionHistoryCommand");
var de_GetGeofenceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CreateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    GeofenceId: import_smithy_client.expectString,
    GeofenceProperties: import_smithy_client._json,
    Geometry: (_) => de_GeofenceGeometry(_, context),
    Status: import_smithy_client.expectString,
    UpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetGeofenceCommand");
var de_GetMapGlyphsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output),
    [_CT]: [, output.headers[_ct]],
    [_CC]: [, output.headers[_cc]]
  });
  const data = await (0, import_smithy_client.collectBody)(output.body, context);
  contents.Blob = data;
  return contents;
}, "de_GetMapGlyphsCommand");
var de_GetMapSpritesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output),
    [_CT]: [, output.headers[_ct]],
    [_CC]: [, output.headers[_cc]]
  });
  const data = await (0, import_smithy_client.collectBody)(output.body, context);
  contents.Blob = data;
  return contents;
}, "de_GetMapSpritesCommand");
var de_GetMapStyleDescriptorCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output),
    [_CT]: [, output.headers[_ct]],
    [_CC]: [, output.headers[_cc]]
  });
  const data = await (0, import_smithy_client.collectBody)(output.body, context);
  contents.Blob = data;
  return contents;
}, "de_GetMapStyleDescriptorCommand");
var de_GetMapTileCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output),
    [_CT]: [, output.headers[_ct]],
    [_CC]: [, output.headers[_cc]]
  });
  const data = await (0, import_smithy_client.collectBody)(output.body, context);
  contents.Blob = data;
  return contents;
}, "de_GetMapTileCommand");
var de_GetPlaceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Place: (_) => de_Place(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetPlaceCommand");
var de_ListDevicePositionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Entries: (_) => de_ListDevicePositionsResponseEntryList(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListDevicePositionsCommand");
var de_ListGeofenceCollectionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Entries: (_) => de_ListGeofenceCollectionsResponseEntryList(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListGeofenceCollectionsCommand");
var de_ListGeofencesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Entries: (_) => de_ListGeofenceResponseEntryList(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListGeofencesCommand");
var de_ListKeysCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Entries: (_) => de_ListKeysResponseEntryList(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListKeysCommand");
var de_ListMapsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Entries: (_) => de_ListMapsResponseEntryList(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListMapsCommand");
var de_ListPlaceIndexesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Entries: (_) => de_ListPlaceIndexesResponseEntryList(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListPlaceIndexesCommand");
var de_ListRouteCalculatorsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Entries: (_) => de_ListRouteCalculatorsResponseEntryList(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListRouteCalculatorsCommand");
var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Tags: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTagsForResourceCommand");
var de_ListTrackerConsumersCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ConsumerArns: import_smithy_client._json,
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTrackerConsumersCommand");
var de_ListTrackersCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Entries: (_) => de_ListTrackersResponseEntryList(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTrackersCommand");
var de_PutGeofenceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CreateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    GeofenceId: import_smithy_client.expectString,
    UpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_PutGeofenceCommand");
var de_SearchPlaceIndexForPositionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Results: (_) => de_SearchForPositionResultList(_, context),
    Summary: (_) => de_SearchPlaceIndexForPositionSummary(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_SearchPlaceIndexForPositionCommand");
var de_SearchPlaceIndexForSuggestionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Results: import_smithy_client._json,
    Summary: (_) => de_SearchPlaceIndexForSuggestionsSummary(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_SearchPlaceIndexForSuggestionsCommand");
var de_SearchPlaceIndexForTextCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Results: (_) => de_SearchForTextResultList(_, context),
    Summary: (_) => de_SearchPlaceIndexForTextSummary(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_SearchPlaceIndexForTextCommand");
var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_TagResourceCommand");
var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UntagResourceCommand");
var de_UpdateGeofenceCollectionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CollectionArn: import_smithy_client.expectString,
    CollectionName: import_smithy_client.expectString,
    UpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateGeofenceCollectionCommand");
var de_UpdateKeyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    KeyArn: import_smithy_client.expectString,
    KeyName: import_smithy_client.expectString,
    UpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateKeyCommand");
var de_UpdateMapCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    MapArn: import_smithy_client.expectString,
    MapName: import_smithy_client.expectString,
    UpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateMapCommand");
var de_UpdatePlaceIndexCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    IndexArn: import_smithy_client.expectString,
    IndexName: import_smithy_client.expectString,
    UpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdatePlaceIndexCommand");
var de_UpdateRouteCalculatorCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CalculatorArn: import_smithy_client.expectString,
    CalculatorName: import_smithy_client.expectString,
    UpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateRouteCalculatorCommand");
var de_UpdateTrackerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    TrackerArn: import_smithy_client.expectString,
    TrackerName: import_smithy_client.expectString,
    UpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateTrackerCommand");
var de_VerifyDevicePositionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    DeviceId: import_smithy_client.expectString,
    DistanceUnit: import_smithy_client.expectString,
    InferredState: (_) => de_InferredState(_, context),
    ReceivedTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    SampleTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_VerifyDevicePositionCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
  };
  const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.location#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.location#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalServerException":
    case "com.amazonaws.location#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.location#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceQuotaExceededException":
    case "com.amazonaws.location#ServiceQuotaExceededException":
      throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.location#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.location#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(LocationServiceException);
var de_AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new AccessDeniedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_AccessDeniedExceptionRes");
var de_ConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new ConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ConflictExceptionRes");
var de_InternalServerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new InternalServerException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalServerExceptionRes");
var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new ResourceNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ResourceNotFoundExceptionRes");
var de_ServiceQuotaExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new ServiceQuotaExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ServiceQuotaExceededExceptionRes");
var de_ThrottlingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new ThrottlingException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ThrottlingExceptionRes");
var de_ValidationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    FieldList: [, (_) => de_ValidationExceptionFieldList(_, context), `fieldList`],
    Message: [, import_smithy_client.expectString, `message`],
    Reason: [, import_smithy_client.expectString, `reason`]
  });
  Object.assign(contents, doc);
  const exception = new ValidationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ValidationExceptionRes");
var se_BatchPutGeofenceRequestEntry = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    GeofenceId: [],
    GeofenceProperties: import_smithy_client._json,
    Geometry: (_) => se_GeofenceGeometry(_, context)
  });
}, "se_BatchPutGeofenceRequestEntry");
var se_BatchPutGeofenceRequestEntryList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_BatchPutGeofenceRequestEntry(entry, context);
  });
}, "se_BatchPutGeofenceRequestEntryList");
var se_BoundingBox = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.serializeFloat)(entry);
  });
}, "se_BoundingBox");
var se_CalculateRouteTruckModeOptions = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    AvoidFerries: [],
    AvoidTolls: [],
    Dimensions: (_) => se_TruckDimensions(_, context),
    Weight: (_) => se_TruckWeight(_, context)
  });
}, "se_CalculateRouteTruckModeOptions");
var se_CellSignals = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    LteCellDetails: (_) => se_LteCellDetailsList(_, context)
  });
}, "se_CellSignals");
var se_Circle = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    Center: (_) => se_Position(_, context),
    Radius: import_smithy_client.serializeFloat
  });
}, "se_Circle");
var se_DevicePositionUpdate = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    Accuracy: (_) => se_PositionalAccuracy(_, context),
    DeviceId: [],
    Position: (_) => se_Position(_, context),
    PositionProperties: import_smithy_client._json,
    SampleTime: import_smithy_client.serializeDateTime
  });
}, "se_DevicePositionUpdate");
var se_DevicePositionUpdateList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_DevicePositionUpdate(entry, context);
  });
}, "se_DevicePositionUpdateList");
var se_DeviceState = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    Accuracy: (_) => se_PositionalAccuracy(_, context),
    CellSignals: (_) => se_CellSignals(_, context),
    DeviceId: [],
    Ipv4Address: [],
    Position: (_) => se_Position(_, context),
    SampleTime: import_smithy_client.serializeDateTime,
    WiFiAccessPoints: import_smithy_client._json
  });
}, "se_DeviceState");
var se_ForecastGeofenceEventsDeviceState = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    Position: (_) => se_Position(_, context),
    Speed: import_smithy_client.serializeFloat
  });
}, "se_ForecastGeofenceEventsDeviceState");
var se_GeofenceGeometry = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    Circle: (_) => se_Circle(_, context),
    Geobuf: context.base64Encoder,
    Polygon: (_) => se_LinearRings(_, context)
  });
}, "se_GeofenceGeometry");
var se_LinearRing = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_Position(entry, context);
  });
}, "se_LinearRing");
var se_LinearRings = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_LinearRing(entry, context);
  });
}, "se_LinearRings");
var se_LteCellDetails = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    CellId: [],
    LocalId: import_smithy_client._json,
    Mcc: [],
    Mnc: [],
    NetworkMeasurements: (_) => se_LteNetworkMeasurementsList(_, context),
    NrCapable: [],
    Rsrp: [],
    Rsrq: import_smithy_client.serializeFloat,
    Tac: [],
    TimingAdvance: []
  });
}, "se_LteCellDetails");
var se_LteCellDetailsList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_LteCellDetails(entry, context);
  });
}, "se_LteCellDetailsList");
var se_LteNetworkMeasurements = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    CellId: [],
    Earfcn: [],
    Pci: [],
    Rsrp: [],
    Rsrq: import_smithy_client.serializeFloat
  });
}, "se_LteNetworkMeasurements");
var se_LteNetworkMeasurementsList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_LteNetworkMeasurements(entry, context);
  });
}, "se_LteNetworkMeasurementsList");
var se_Position = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.serializeFloat)(entry);
  });
}, "se_Position");
var se_PositionalAccuracy = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    Horizontal: import_smithy_client.serializeFloat
  });
}, "se_PositionalAccuracy");
var se_PositionList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_Position(entry, context);
  });
}, "se_PositionList");
var se_TrackingFilterGeometry = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    Polygon: (_) => se_LinearRings(_, context)
  });
}, "se_TrackingFilterGeometry");
var se_TruckDimensions = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    Height: import_smithy_client.serializeFloat,
    Length: import_smithy_client.serializeFloat,
    Unit: [],
    Width: import_smithy_client.serializeFloat
  });
}, "se_TruckDimensions");
var se_TruckWeight = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    Total: import_smithy_client.serializeFloat,
    Unit: []
  });
}, "se_TruckWeight");
var se_WaypointPositionList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_Position(entry, context);
  });
}, "se_WaypointPositionList");
var de_BatchEvaluateGeofencesError = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DeviceId: import_smithy_client.expectString,
    Error: import_smithy_client._json,
    SampleTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
}, "de_BatchEvaluateGeofencesError");
var de_BatchEvaluateGeofencesErrorList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BatchEvaluateGeofencesError(entry, context);
  });
  return retVal;
}, "de_BatchEvaluateGeofencesErrorList");
var de_BatchPutGeofenceSuccess = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CreateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    GeofenceId: import_smithy_client.expectString,
    UpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
}, "de_BatchPutGeofenceSuccess");
var de_BatchPutGeofenceSuccessList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BatchPutGeofenceSuccess(entry, context);
  });
  return retVal;
}, "de_BatchPutGeofenceSuccessList");
var de_BatchUpdateDevicePositionError = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DeviceId: import_smithy_client.expectString,
    Error: import_smithy_client._json,
    SampleTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
}, "de_BatchUpdateDevicePositionError");
var de_BatchUpdateDevicePositionErrorList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BatchUpdateDevicePositionError(entry, context);
  });
  return retVal;
}, "de_BatchUpdateDevicePositionErrorList");
var de_BoundingBox = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.limitedParseDouble)(entry);
  });
  return retVal;
}, "de_BoundingBox");
var de_CalculateRouteSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DataSource: import_smithy_client.expectString,
    Distance: import_smithy_client.limitedParseDouble,
    DistanceUnit: import_smithy_client.expectString,
    DurationSeconds: import_smithy_client.limitedParseDouble,
    RouteBBox: (_) => de_BoundingBox(_, context)
  });
}, "de_CalculateRouteSummary");
var de_Circle = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Center: (_) => de_Position(_, context),
    Radius: import_smithy_client.limitedParseDouble
  });
}, "de_Circle");
var de_DevicePosition = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Accuracy: (_) => de_PositionalAccuracy(_, context),
    DeviceId: import_smithy_client.expectString,
    Position: (_) => de_Position(_, context),
    PositionProperties: import_smithy_client._json,
    ReceivedTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    SampleTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
}, "de_DevicePosition");
var de_DevicePositionList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_DevicePosition(entry, context);
  });
  return retVal;
}, "de_DevicePositionList");
var de_ForecastedEvent = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    EventId: import_smithy_client.expectString,
    EventType: import_smithy_client.expectString,
    ForecastedBreachTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    GeofenceId: import_smithy_client.expectString,
    GeofenceProperties: import_smithy_client._json,
    IsDeviceInGeofence: import_smithy_client.expectBoolean,
    NearestDistance: import_smithy_client.limitedParseDouble
  });
}, "de_ForecastedEvent");
var de_ForecastedEventsList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ForecastedEvent(entry, context);
  });
  return retVal;
}, "de_ForecastedEventsList");
var de_GeofenceGeometry = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Circle: (_) => de_Circle(_, context),
    Geobuf: context.base64Decoder,
    Polygon: (_) => de_LinearRings(_, context)
  });
}, "de_GeofenceGeometry");
var de_InferredState = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Accuracy: (_) => de_PositionalAccuracy(_, context),
    DeviationDistance: import_smithy_client.limitedParseDouble,
    Position: (_) => de_Position(_, context),
    ProxyDetected: import_smithy_client.expectBoolean
  });
}, "de_InferredState");
var de_Leg = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Distance: import_smithy_client.limitedParseDouble,
    DurationSeconds: import_smithy_client.limitedParseDouble,
    EndPosition: (_) => de_Position(_, context),
    Geometry: (_) => de_LegGeometry(_, context),
    StartPosition: (_) => de_Position(_, context),
    Steps: (_) => de_StepList(_, context)
  });
}, "de_Leg");
var de_LegGeometry = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    LineString: (_) => de_LineString(_, context)
  });
}, "de_LegGeometry");
var de_LegList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Leg(entry, context);
  });
  return retVal;
}, "de_LegList");
var de_LinearRing = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Position(entry, context);
  });
  return retVal;
}, "de_LinearRing");
var de_LinearRings = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_LinearRing(entry, context);
  });
  return retVal;
}, "de_LinearRings");
var de_LineString = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Position(entry, context);
  });
  return retVal;
}, "de_LineString");
var de_ListDevicePositionsResponseEntry = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Accuracy: (_) => de_PositionalAccuracy(_, context),
    DeviceId: import_smithy_client.expectString,
    Position: (_) => de_Position(_, context),
    PositionProperties: import_smithy_client._json,
    SampleTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
}, "de_ListDevicePositionsResponseEntry");
var de_ListDevicePositionsResponseEntryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ListDevicePositionsResponseEntry(entry, context);
  });
  return retVal;
}, "de_ListDevicePositionsResponseEntryList");
var de_ListGeofenceCollectionsResponseEntry = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CollectionName: import_smithy_client.expectString,
    CreateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    Description: import_smithy_client.expectString,
    PricingPlan: import_smithy_client.expectString,
    PricingPlanDataSource: import_smithy_client.expectString,
    UpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
}, "de_ListGeofenceCollectionsResponseEntry");
var de_ListGeofenceCollectionsResponseEntryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ListGeofenceCollectionsResponseEntry(entry, context);
  });
  return retVal;
}, "de_ListGeofenceCollectionsResponseEntryList");
var de_ListGeofenceResponseEntry = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CreateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    GeofenceId: import_smithy_client.expectString,
    GeofenceProperties: import_smithy_client._json,
    Geometry: (_) => de_GeofenceGeometry(_, context),
    Status: import_smithy_client.expectString,
    UpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
}, "de_ListGeofenceResponseEntry");
var de_ListGeofenceResponseEntryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ListGeofenceResponseEntry(entry, context);
  });
  return retVal;
}, "de_ListGeofenceResponseEntryList");
var de_ListKeysResponseEntry = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CreateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    Description: import_smithy_client.expectString,
    ExpireTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    KeyName: import_smithy_client.expectString,
    Restrictions: import_smithy_client._json,
    UpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
}, "de_ListKeysResponseEntry");
var de_ListKeysResponseEntryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ListKeysResponseEntry(entry, context);
  });
  return retVal;
}, "de_ListKeysResponseEntryList");
var de_ListMapsResponseEntry = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CreateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    DataSource: import_smithy_client.expectString,
    Description: import_smithy_client.expectString,
    MapName: import_smithy_client.expectString,
    PricingPlan: import_smithy_client.expectString,
    UpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
}, "de_ListMapsResponseEntry");
var de_ListMapsResponseEntryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ListMapsResponseEntry(entry, context);
  });
  return retVal;
}, "de_ListMapsResponseEntryList");
var de_ListPlaceIndexesResponseEntry = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CreateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    DataSource: import_smithy_client.expectString,
    Description: import_smithy_client.expectString,
    IndexName: import_smithy_client.expectString,
    PricingPlan: import_smithy_client.expectString,
    UpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
}, "de_ListPlaceIndexesResponseEntry");
var de_ListPlaceIndexesResponseEntryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ListPlaceIndexesResponseEntry(entry, context);
  });
  return retVal;
}, "de_ListPlaceIndexesResponseEntryList");
var de_ListRouteCalculatorsResponseEntry = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CalculatorName: import_smithy_client.expectString,
    CreateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    DataSource: import_smithy_client.expectString,
    Description: import_smithy_client.expectString,
    PricingPlan: import_smithy_client.expectString,
    UpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
}, "de_ListRouteCalculatorsResponseEntry");
var de_ListRouteCalculatorsResponseEntryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ListRouteCalculatorsResponseEntry(entry, context);
  });
  return retVal;
}, "de_ListRouteCalculatorsResponseEntryList");
var de_ListTrackersResponseEntry = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CreateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    Description: import_smithy_client.expectString,
    PricingPlan: import_smithy_client.expectString,
    PricingPlanDataSource: import_smithy_client.expectString,
    TrackerName: import_smithy_client.expectString,
    UpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_))
  });
}, "de_ListTrackersResponseEntry");
var de_ListTrackersResponseEntryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ListTrackersResponseEntry(entry, context);
  });
  return retVal;
}, "de_ListTrackersResponseEntryList");
var de_Place = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AddressNumber: import_smithy_client.expectString,
    Categories: import_smithy_client._json,
    Country: import_smithy_client.expectString,
    Geometry: (_) => de_PlaceGeometry(_, context),
    Interpolated: import_smithy_client.expectBoolean,
    Label: import_smithy_client.expectString,
    Municipality: import_smithy_client.expectString,
    Neighborhood: import_smithy_client.expectString,
    PostalCode: import_smithy_client.expectString,
    Region: import_smithy_client.expectString,
    Street: import_smithy_client.expectString,
    SubMunicipality: import_smithy_client.expectString,
    SubRegion: import_smithy_client.expectString,
    SupplementalCategories: import_smithy_client._json,
    TimeZone: import_smithy_client._json,
    UnitNumber: import_smithy_client.expectString,
    UnitType: import_smithy_client.expectString
  });
}, "de_Place");
var de_PlaceGeometry = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Point: (_) => de_Position(_, context)
  });
}, "de_PlaceGeometry");
var de_Position = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.limitedParseDouble)(entry);
  });
  return retVal;
}, "de_Position");
var de_PositionalAccuracy = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Horizontal: import_smithy_client.limitedParseDouble
  });
}, "de_PositionalAccuracy");
var de_PositionList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Position(entry, context);
  });
  return retVal;
}, "de_PositionList");
var de_RouteMatrix = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_RouteMatrixRow(entry, context);
  });
  return retVal;
}, "de_RouteMatrix");
var de_RouteMatrixEntry = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Distance: import_smithy_client.limitedParseDouble,
    DurationSeconds: import_smithy_client.limitedParseDouble,
    Error: import_smithy_client._json
  });
}, "de_RouteMatrixEntry");
var de_RouteMatrixRow = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_RouteMatrixEntry(entry, context);
  });
  return retVal;
}, "de_RouteMatrixRow");
var de_SearchForPositionResult = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Distance: import_smithy_client.limitedParseDouble,
    Place: (_) => de_Place(_, context),
    PlaceId: import_smithy_client.expectString
  });
}, "de_SearchForPositionResult");
var de_SearchForPositionResultList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_SearchForPositionResult(entry, context);
  });
  return retVal;
}, "de_SearchForPositionResultList");
var de_SearchForTextResult = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Distance: import_smithy_client.limitedParseDouble,
    Place: (_) => de_Place(_, context),
    PlaceId: import_smithy_client.expectString,
    Relevance: import_smithy_client.limitedParseDouble
  });
}, "de_SearchForTextResult");
var de_SearchForTextResultList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_SearchForTextResult(entry, context);
  });
  return retVal;
}, "de_SearchForTextResultList");
var de_SearchPlaceIndexForPositionSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DataSource: import_smithy_client.expectString,
    Language: import_smithy_client.expectString,
    MaxResults: import_smithy_client.expectInt32,
    Position: (_) => de_Position(_, context)
  });
}, "de_SearchPlaceIndexForPositionSummary");
var de_SearchPlaceIndexForSuggestionsSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BiasPosition: (_) => de_Position(_, context),
    DataSource: import_smithy_client.expectString,
    FilterBBox: (_) => de_BoundingBox(_, context),
    FilterCategories: import_smithy_client._json,
    FilterCountries: import_smithy_client._json,
    Language: import_smithy_client.expectString,
    MaxResults: import_smithy_client.expectInt32,
    Text: import_smithy_client.expectString
  });
}, "de_SearchPlaceIndexForSuggestionsSummary");
var de_SearchPlaceIndexForTextSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BiasPosition: (_) => de_Position(_, context),
    DataSource: import_smithy_client.expectString,
    FilterBBox: (_) => de_BoundingBox(_, context),
    FilterCategories: import_smithy_client._json,
    FilterCountries: import_smithy_client._json,
    Language: import_smithy_client.expectString,
    MaxResults: import_smithy_client.expectInt32,
    ResultBBox: (_) => de_BoundingBox(_, context),
    Text: import_smithy_client.expectString
  });
}, "de_SearchPlaceIndexForTextSummary");
var de_Step = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Distance: import_smithy_client.limitedParseDouble,
    DurationSeconds: import_smithy_client.limitedParseDouble,
    EndPosition: (_) => de_Position(_, context),
    GeometryOffset: import_smithy_client.expectInt32,
    StartPosition: (_) => de_Position(_, context)
  });
}, "de_Step");
var de_StepList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Step(entry, context);
  });
  return retVal;
}, "de_StepList");
var de_ValidationExceptionField = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Message: [, import_smithy_client.expectString, `message`],
    Name: [, import_smithy_client.expectString, `name`]
  });
}, "de_ValidationExceptionField");
var de_ValidationExceptionFieldList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ValidationExceptionField(entry, context);
  });
  return retVal;
}, "de_ValidationExceptionFieldList");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var _CC = "CacheControl";
var _CT = "ContentType";
var _FD = "ForceDelete";
var _K = "Key";
var _L = "Language";
var _TK = "TagKeys";
var _cc = "cache-control";
var _ct = "content-type";
var _fD = "forceDelete";
var _k = "key";
var _l = "language";
var _tK = "tagKeys";

// src/commands/AssociateTrackerConsumerCommand.ts
var _AssociateTrackerConsumerCommand = class _AssociateTrackerConsumerCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "AssociateTrackerConsumer", {}).n("LocationClient", "AssociateTrackerConsumerCommand").f(void 0, void 0).ser(se_AssociateTrackerConsumerCommand).de(de_AssociateTrackerConsumerCommand).build() {
};
__name(_AssociateTrackerConsumerCommand, "AssociateTrackerConsumerCommand");
var AssociateTrackerConsumerCommand = _AssociateTrackerConsumerCommand;

// src/commands/BatchDeleteDevicePositionHistoryCommand.ts



var _BatchDeleteDevicePositionHistoryCommand = class _BatchDeleteDevicePositionHistoryCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "BatchDeleteDevicePositionHistory", {}).n("LocationClient", "BatchDeleteDevicePositionHistoryCommand").f(void 0, void 0).ser(se_BatchDeleteDevicePositionHistoryCommand).de(de_BatchDeleteDevicePositionHistoryCommand).build() {
};
__name(_BatchDeleteDevicePositionHistoryCommand, "BatchDeleteDevicePositionHistoryCommand");
var BatchDeleteDevicePositionHistoryCommand = _BatchDeleteDevicePositionHistoryCommand;

// src/commands/BatchDeleteGeofenceCommand.ts



var _BatchDeleteGeofenceCommand = class _BatchDeleteGeofenceCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "BatchDeleteGeofence", {}).n("LocationClient", "BatchDeleteGeofenceCommand").f(void 0, void 0).ser(se_BatchDeleteGeofenceCommand).de(de_BatchDeleteGeofenceCommand).build() {
};
__name(_BatchDeleteGeofenceCommand, "BatchDeleteGeofenceCommand");
var BatchDeleteGeofenceCommand = _BatchDeleteGeofenceCommand;

// src/commands/BatchEvaluateGeofencesCommand.ts



var _BatchEvaluateGeofencesCommand = class _BatchEvaluateGeofencesCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "BatchEvaluateGeofences", {}).n("LocationClient", "BatchEvaluateGeofencesCommand").f(BatchEvaluateGeofencesRequestFilterSensitiveLog, void 0).ser(se_BatchEvaluateGeofencesCommand).de(de_BatchEvaluateGeofencesCommand).build() {
};
__name(_BatchEvaluateGeofencesCommand, "BatchEvaluateGeofencesCommand");
var BatchEvaluateGeofencesCommand = _BatchEvaluateGeofencesCommand;

// src/commands/BatchGetDevicePositionCommand.ts



var _BatchGetDevicePositionCommand = class _BatchGetDevicePositionCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "BatchGetDevicePosition", {}).n("LocationClient", "BatchGetDevicePositionCommand").f(void 0, BatchGetDevicePositionResponseFilterSensitiveLog).ser(se_BatchGetDevicePositionCommand).de(de_BatchGetDevicePositionCommand).build() {
};
__name(_BatchGetDevicePositionCommand, "BatchGetDevicePositionCommand");
var BatchGetDevicePositionCommand = _BatchGetDevicePositionCommand;

// src/commands/BatchPutGeofenceCommand.ts



var _BatchPutGeofenceCommand = class _BatchPutGeofenceCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "BatchPutGeofence", {}).n("LocationClient", "BatchPutGeofenceCommand").f(BatchPutGeofenceRequestFilterSensitiveLog, void 0).ser(se_BatchPutGeofenceCommand).de(de_BatchPutGeofenceCommand).build() {
};
__name(_BatchPutGeofenceCommand, "BatchPutGeofenceCommand");
var BatchPutGeofenceCommand = _BatchPutGeofenceCommand;

// src/commands/BatchUpdateDevicePositionCommand.ts



var _BatchUpdateDevicePositionCommand = class _BatchUpdateDevicePositionCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "BatchUpdateDevicePosition", {}).n("LocationClient", "BatchUpdateDevicePositionCommand").f(BatchUpdateDevicePositionRequestFilterSensitiveLog, void 0).ser(se_BatchUpdateDevicePositionCommand).de(de_BatchUpdateDevicePositionCommand).build() {
};
__name(_BatchUpdateDevicePositionCommand, "BatchUpdateDevicePositionCommand");
var BatchUpdateDevicePositionCommand = _BatchUpdateDevicePositionCommand;

// src/commands/CalculateRouteCommand.ts



var _CalculateRouteCommand = class _CalculateRouteCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "CalculateRoute", {}).n("LocationClient", "CalculateRouteCommand").f(CalculateRouteRequestFilterSensitiveLog, CalculateRouteResponseFilterSensitiveLog).ser(se_CalculateRouteCommand).de(de_CalculateRouteCommand).build() {
};
__name(_CalculateRouteCommand, "CalculateRouteCommand");
var CalculateRouteCommand = _CalculateRouteCommand;

// src/commands/CalculateRouteMatrixCommand.ts



var _CalculateRouteMatrixCommand = class _CalculateRouteMatrixCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "CalculateRouteMatrix", {}).n("LocationClient", "CalculateRouteMatrixCommand").f(CalculateRouteMatrixRequestFilterSensitiveLog, CalculateRouteMatrixResponseFilterSensitiveLog).ser(se_CalculateRouteMatrixCommand).de(de_CalculateRouteMatrixCommand).build() {
};
__name(_CalculateRouteMatrixCommand, "CalculateRouteMatrixCommand");
var CalculateRouteMatrixCommand = _CalculateRouteMatrixCommand;

// src/commands/CreateGeofenceCollectionCommand.ts



var _CreateGeofenceCollectionCommand = class _CreateGeofenceCollectionCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "CreateGeofenceCollection", {}).n("LocationClient", "CreateGeofenceCollectionCommand").f(void 0, void 0).ser(se_CreateGeofenceCollectionCommand).de(de_CreateGeofenceCollectionCommand).build() {
};
__name(_CreateGeofenceCollectionCommand, "CreateGeofenceCollectionCommand");
var CreateGeofenceCollectionCommand = _CreateGeofenceCollectionCommand;

// src/commands/CreateKeyCommand.ts



var _CreateKeyCommand = class _CreateKeyCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "CreateKey", {}).n("LocationClient", "CreateKeyCommand").f(void 0, CreateKeyResponseFilterSensitiveLog).ser(se_CreateKeyCommand).de(de_CreateKeyCommand).build() {
};
__name(_CreateKeyCommand, "CreateKeyCommand");
var CreateKeyCommand = _CreateKeyCommand;

// src/commands/CreateMapCommand.ts



var _CreateMapCommand = class _CreateMapCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "CreateMap", {}).n("LocationClient", "CreateMapCommand").f(void 0, void 0).ser(se_CreateMapCommand).de(de_CreateMapCommand).build() {
};
__name(_CreateMapCommand, "CreateMapCommand");
var CreateMapCommand = _CreateMapCommand;

// src/commands/CreatePlaceIndexCommand.ts



var _CreatePlaceIndexCommand = class _CreatePlaceIndexCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "CreatePlaceIndex", {}).n("LocationClient", "CreatePlaceIndexCommand").f(void 0, void 0).ser(se_CreatePlaceIndexCommand).de(de_CreatePlaceIndexCommand).build() {
};
__name(_CreatePlaceIndexCommand, "CreatePlaceIndexCommand");
var CreatePlaceIndexCommand = _CreatePlaceIndexCommand;

// src/commands/CreateRouteCalculatorCommand.ts



var _CreateRouteCalculatorCommand = class _CreateRouteCalculatorCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "CreateRouteCalculator", {}).n("LocationClient", "CreateRouteCalculatorCommand").f(void 0, void 0).ser(se_CreateRouteCalculatorCommand).de(de_CreateRouteCalculatorCommand).build() {
};
__name(_CreateRouteCalculatorCommand, "CreateRouteCalculatorCommand");
var CreateRouteCalculatorCommand = _CreateRouteCalculatorCommand;

// src/commands/CreateTrackerCommand.ts



var _CreateTrackerCommand = class _CreateTrackerCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "CreateTracker", {}).n("LocationClient", "CreateTrackerCommand").f(void 0, void 0).ser(se_CreateTrackerCommand).de(de_CreateTrackerCommand).build() {
};
__name(_CreateTrackerCommand, "CreateTrackerCommand");
var CreateTrackerCommand = _CreateTrackerCommand;

// src/commands/DeleteGeofenceCollectionCommand.ts



var _DeleteGeofenceCollectionCommand = class _DeleteGeofenceCollectionCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "DeleteGeofenceCollection", {}).n("LocationClient", "DeleteGeofenceCollectionCommand").f(void 0, void 0).ser(se_DeleteGeofenceCollectionCommand).de(de_DeleteGeofenceCollectionCommand).build() {
};
__name(_DeleteGeofenceCollectionCommand, "DeleteGeofenceCollectionCommand");
var DeleteGeofenceCollectionCommand = _DeleteGeofenceCollectionCommand;

// src/commands/DeleteKeyCommand.ts



var _DeleteKeyCommand = class _DeleteKeyCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "DeleteKey", {}).n("LocationClient", "DeleteKeyCommand").f(void 0, void 0).ser(se_DeleteKeyCommand).de(de_DeleteKeyCommand).build() {
};
__name(_DeleteKeyCommand, "DeleteKeyCommand");
var DeleteKeyCommand = _DeleteKeyCommand;

// src/commands/DeleteMapCommand.ts



var _DeleteMapCommand = class _DeleteMapCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "DeleteMap", {}).n("LocationClient", "DeleteMapCommand").f(void 0, void 0).ser(se_DeleteMapCommand).de(de_DeleteMapCommand).build() {
};
__name(_DeleteMapCommand, "DeleteMapCommand");
var DeleteMapCommand = _DeleteMapCommand;

// src/commands/DeletePlaceIndexCommand.ts



var _DeletePlaceIndexCommand = class _DeletePlaceIndexCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "DeletePlaceIndex", {}).n("LocationClient", "DeletePlaceIndexCommand").f(void 0, void 0).ser(se_DeletePlaceIndexCommand).de(de_DeletePlaceIndexCommand).build() {
};
__name(_DeletePlaceIndexCommand, "DeletePlaceIndexCommand");
var DeletePlaceIndexCommand = _DeletePlaceIndexCommand;

// src/commands/DeleteRouteCalculatorCommand.ts



var _DeleteRouteCalculatorCommand = class _DeleteRouteCalculatorCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "DeleteRouteCalculator", {}).n("LocationClient", "DeleteRouteCalculatorCommand").f(void 0, void 0).ser(se_DeleteRouteCalculatorCommand).de(de_DeleteRouteCalculatorCommand).build() {
};
__name(_DeleteRouteCalculatorCommand, "DeleteRouteCalculatorCommand");
var DeleteRouteCalculatorCommand = _DeleteRouteCalculatorCommand;

// src/commands/DeleteTrackerCommand.ts



var _DeleteTrackerCommand = class _DeleteTrackerCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "DeleteTracker", {}).n("LocationClient", "DeleteTrackerCommand").f(void 0, void 0).ser(se_DeleteTrackerCommand).de(de_DeleteTrackerCommand).build() {
};
__name(_DeleteTrackerCommand, "DeleteTrackerCommand");
var DeleteTrackerCommand = _DeleteTrackerCommand;

// src/commands/DescribeGeofenceCollectionCommand.ts



var _DescribeGeofenceCollectionCommand = class _DescribeGeofenceCollectionCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "DescribeGeofenceCollection", {}).n("LocationClient", "DescribeGeofenceCollectionCommand").f(void 0, void 0).ser(se_DescribeGeofenceCollectionCommand).de(de_DescribeGeofenceCollectionCommand).build() {
};
__name(_DescribeGeofenceCollectionCommand, "DescribeGeofenceCollectionCommand");
var DescribeGeofenceCollectionCommand = _DescribeGeofenceCollectionCommand;

// src/commands/DescribeKeyCommand.ts



var _DescribeKeyCommand = class _DescribeKeyCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "DescribeKey", {}).n("LocationClient", "DescribeKeyCommand").f(void 0, DescribeKeyResponseFilterSensitiveLog).ser(se_DescribeKeyCommand).de(de_DescribeKeyCommand).build() {
};
__name(_DescribeKeyCommand, "DescribeKeyCommand");
var DescribeKeyCommand = _DescribeKeyCommand;

// src/commands/DescribeMapCommand.ts



var _DescribeMapCommand = class _DescribeMapCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "DescribeMap", {}).n("LocationClient", "DescribeMapCommand").f(void 0, void 0).ser(se_DescribeMapCommand).de(de_DescribeMapCommand).build() {
};
__name(_DescribeMapCommand, "DescribeMapCommand");
var DescribeMapCommand = _DescribeMapCommand;

// src/commands/DescribePlaceIndexCommand.ts



var _DescribePlaceIndexCommand = class _DescribePlaceIndexCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "DescribePlaceIndex", {}).n("LocationClient", "DescribePlaceIndexCommand").f(void 0, void 0).ser(se_DescribePlaceIndexCommand).de(de_DescribePlaceIndexCommand).build() {
};
__name(_DescribePlaceIndexCommand, "DescribePlaceIndexCommand");
var DescribePlaceIndexCommand = _DescribePlaceIndexCommand;

// src/commands/DescribeRouteCalculatorCommand.ts



var _DescribeRouteCalculatorCommand = class _DescribeRouteCalculatorCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "DescribeRouteCalculator", {}).n("LocationClient", "DescribeRouteCalculatorCommand").f(void 0, void 0).ser(se_DescribeRouteCalculatorCommand).de(de_DescribeRouteCalculatorCommand).build() {
};
__name(_DescribeRouteCalculatorCommand, "DescribeRouteCalculatorCommand");
var DescribeRouteCalculatorCommand = _DescribeRouteCalculatorCommand;

// src/commands/DescribeTrackerCommand.ts



var _DescribeTrackerCommand = class _DescribeTrackerCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "DescribeTracker", {}).n("LocationClient", "DescribeTrackerCommand").f(void 0, void 0).ser(se_DescribeTrackerCommand).de(de_DescribeTrackerCommand).build() {
};
__name(_DescribeTrackerCommand, "DescribeTrackerCommand");
var DescribeTrackerCommand = _DescribeTrackerCommand;

// src/commands/DisassociateTrackerConsumerCommand.ts



var _DisassociateTrackerConsumerCommand = class _DisassociateTrackerConsumerCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "DisassociateTrackerConsumer", {}).n("LocationClient", "DisassociateTrackerConsumerCommand").f(void 0, void 0).ser(se_DisassociateTrackerConsumerCommand).de(de_DisassociateTrackerConsumerCommand).build() {
};
__name(_DisassociateTrackerConsumerCommand, "DisassociateTrackerConsumerCommand");
var DisassociateTrackerConsumerCommand = _DisassociateTrackerConsumerCommand;

// src/commands/ForecastGeofenceEventsCommand.ts



var _ForecastGeofenceEventsCommand = class _ForecastGeofenceEventsCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "ForecastGeofenceEvents", {}).n("LocationClient", "ForecastGeofenceEventsCommand").f(ForecastGeofenceEventsRequestFilterSensitiveLog, ForecastGeofenceEventsResponseFilterSensitiveLog).ser(se_ForecastGeofenceEventsCommand).de(de_ForecastGeofenceEventsCommand).build() {
};
__name(_ForecastGeofenceEventsCommand, "ForecastGeofenceEventsCommand");
var ForecastGeofenceEventsCommand = _ForecastGeofenceEventsCommand;

// src/commands/GetDevicePositionCommand.ts



var _GetDevicePositionCommand = class _GetDevicePositionCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "GetDevicePosition", {}).n("LocationClient", "GetDevicePositionCommand").f(void 0, GetDevicePositionResponseFilterSensitiveLog).ser(se_GetDevicePositionCommand).de(de_GetDevicePositionCommand).build() {
};
__name(_GetDevicePositionCommand, "GetDevicePositionCommand");
var GetDevicePositionCommand = _GetDevicePositionCommand;

// src/commands/GetDevicePositionHistoryCommand.ts



var _GetDevicePositionHistoryCommand = class _GetDevicePositionHistoryCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "GetDevicePositionHistory", {}).n("LocationClient", "GetDevicePositionHistoryCommand").f(void 0, GetDevicePositionHistoryResponseFilterSensitiveLog).ser(se_GetDevicePositionHistoryCommand).de(de_GetDevicePositionHistoryCommand).build() {
};
__name(_GetDevicePositionHistoryCommand, "GetDevicePositionHistoryCommand");
var GetDevicePositionHistoryCommand = _GetDevicePositionHistoryCommand;

// src/commands/GetGeofenceCommand.ts



var _GetGeofenceCommand = class _GetGeofenceCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "GetGeofence", {}).n("LocationClient", "GetGeofenceCommand").f(void 0, GetGeofenceResponseFilterSensitiveLog).ser(se_GetGeofenceCommand).de(de_GetGeofenceCommand).build() {
};
__name(_GetGeofenceCommand, "GetGeofenceCommand");
var GetGeofenceCommand = _GetGeofenceCommand;

// src/commands/GetMapGlyphsCommand.ts



var _GetMapGlyphsCommand = class _GetMapGlyphsCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "GetMapGlyphs", {}).n("LocationClient", "GetMapGlyphsCommand").f(GetMapGlyphsRequestFilterSensitiveLog, void 0).ser(se_GetMapGlyphsCommand).de(de_GetMapGlyphsCommand).build() {
};
__name(_GetMapGlyphsCommand, "GetMapGlyphsCommand");
var GetMapGlyphsCommand = _GetMapGlyphsCommand;

// src/commands/GetMapSpritesCommand.ts



var _GetMapSpritesCommand = class _GetMapSpritesCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "GetMapSprites", {}).n("LocationClient", "GetMapSpritesCommand").f(GetMapSpritesRequestFilterSensitiveLog, void 0).ser(se_GetMapSpritesCommand).de(de_GetMapSpritesCommand).build() {
};
__name(_GetMapSpritesCommand, "GetMapSpritesCommand");
var GetMapSpritesCommand = _GetMapSpritesCommand;

// src/commands/GetMapStyleDescriptorCommand.ts



var _GetMapStyleDescriptorCommand = class _GetMapStyleDescriptorCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "GetMapStyleDescriptor", {}).n("LocationClient", "GetMapStyleDescriptorCommand").f(GetMapStyleDescriptorRequestFilterSensitiveLog, void 0).ser(se_GetMapStyleDescriptorCommand).de(de_GetMapStyleDescriptorCommand).build() {
};
__name(_GetMapStyleDescriptorCommand, "GetMapStyleDescriptorCommand");
var GetMapStyleDescriptorCommand = _GetMapStyleDescriptorCommand;

// src/commands/GetMapTileCommand.ts



var _GetMapTileCommand = class _GetMapTileCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "GetMapTile", {}).n("LocationClient", "GetMapTileCommand").f(GetMapTileRequestFilterSensitiveLog, void 0).ser(se_GetMapTileCommand).de(de_GetMapTileCommand).build() {
};
__name(_GetMapTileCommand, "GetMapTileCommand");
var GetMapTileCommand = _GetMapTileCommand;

// src/commands/GetPlaceCommand.ts



var _GetPlaceCommand = class _GetPlaceCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "GetPlace", {}).n("LocationClient", "GetPlaceCommand").f(GetPlaceRequestFilterSensitiveLog, GetPlaceResponseFilterSensitiveLog).ser(se_GetPlaceCommand).de(de_GetPlaceCommand).build() {
};
__name(_GetPlaceCommand, "GetPlaceCommand");
var GetPlaceCommand = _GetPlaceCommand;

// src/commands/ListDevicePositionsCommand.ts



var _ListDevicePositionsCommand = class _ListDevicePositionsCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "ListDevicePositions", {}).n("LocationClient", "ListDevicePositionsCommand").f(ListDevicePositionsRequestFilterSensitiveLog, ListDevicePositionsResponseFilterSensitiveLog).ser(se_ListDevicePositionsCommand).de(de_ListDevicePositionsCommand).build() {
};
__name(_ListDevicePositionsCommand, "ListDevicePositionsCommand");
var ListDevicePositionsCommand = _ListDevicePositionsCommand;

// src/commands/ListGeofenceCollectionsCommand.ts



var _ListGeofenceCollectionsCommand = class _ListGeofenceCollectionsCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "ListGeofenceCollections", {}).n("LocationClient", "ListGeofenceCollectionsCommand").f(void 0, void 0).ser(se_ListGeofenceCollectionsCommand).de(de_ListGeofenceCollectionsCommand).build() {
};
__name(_ListGeofenceCollectionsCommand, "ListGeofenceCollectionsCommand");
var ListGeofenceCollectionsCommand = _ListGeofenceCollectionsCommand;

// src/commands/ListGeofencesCommand.ts



var _ListGeofencesCommand = class _ListGeofencesCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "ListGeofences", {}).n("LocationClient", "ListGeofencesCommand").f(void 0, ListGeofencesResponseFilterSensitiveLog).ser(se_ListGeofencesCommand).de(de_ListGeofencesCommand).build() {
};
__name(_ListGeofencesCommand, "ListGeofencesCommand");
var ListGeofencesCommand = _ListGeofencesCommand;

// src/commands/ListKeysCommand.ts



var _ListKeysCommand = class _ListKeysCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "ListKeys", {}).n("LocationClient", "ListKeysCommand").f(void 0, void 0).ser(se_ListKeysCommand).de(de_ListKeysCommand).build() {
};
__name(_ListKeysCommand, "ListKeysCommand");
var ListKeysCommand = _ListKeysCommand;

// src/commands/ListMapsCommand.ts



var _ListMapsCommand = class _ListMapsCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "ListMaps", {}).n("LocationClient", "ListMapsCommand").f(void 0, void 0).ser(se_ListMapsCommand).de(de_ListMapsCommand).build() {
};
__name(_ListMapsCommand, "ListMapsCommand");
var ListMapsCommand = _ListMapsCommand;

// src/commands/ListPlaceIndexesCommand.ts



var _ListPlaceIndexesCommand = class _ListPlaceIndexesCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "ListPlaceIndexes", {}).n("LocationClient", "ListPlaceIndexesCommand").f(void 0, void 0).ser(se_ListPlaceIndexesCommand).de(de_ListPlaceIndexesCommand).build() {
};
__name(_ListPlaceIndexesCommand, "ListPlaceIndexesCommand");
var ListPlaceIndexesCommand = _ListPlaceIndexesCommand;

// src/commands/ListRouteCalculatorsCommand.ts



var _ListRouteCalculatorsCommand = class _ListRouteCalculatorsCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "ListRouteCalculators", {}).n("LocationClient", "ListRouteCalculatorsCommand").f(void 0, void 0).ser(se_ListRouteCalculatorsCommand).de(de_ListRouteCalculatorsCommand).build() {
};
__name(_ListRouteCalculatorsCommand, "ListRouteCalculatorsCommand");
var ListRouteCalculatorsCommand = _ListRouteCalculatorsCommand;

// src/commands/ListTagsForResourceCommand.ts



var _ListTagsForResourceCommand = class _ListTagsForResourceCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "ListTagsForResource", {}).n("LocationClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
};
__name(_ListTagsForResourceCommand, "ListTagsForResourceCommand");
var ListTagsForResourceCommand = _ListTagsForResourceCommand;

// src/commands/ListTrackerConsumersCommand.ts



var _ListTrackerConsumersCommand = class _ListTrackerConsumersCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "ListTrackerConsumers", {}).n("LocationClient", "ListTrackerConsumersCommand").f(void 0, void 0).ser(se_ListTrackerConsumersCommand).de(de_ListTrackerConsumersCommand).build() {
};
__name(_ListTrackerConsumersCommand, "ListTrackerConsumersCommand");
var ListTrackerConsumersCommand = _ListTrackerConsumersCommand;

// src/commands/ListTrackersCommand.ts



var _ListTrackersCommand = class _ListTrackersCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "ListTrackers", {}).n("LocationClient", "ListTrackersCommand").f(void 0, void 0).ser(se_ListTrackersCommand).de(de_ListTrackersCommand).build() {
};
__name(_ListTrackersCommand, "ListTrackersCommand");
var ListTrackersCommand = _ListTrackersCommand;

// src/commands/PutGeofenceCommand.ts



var _PutGeofenceCommand = class _PutGeofenceCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "PutGeofence", {}).n("LocationClient", "PutGeofenceCommand").f(PutGeofenceRequestFilterSensitiveLog, void 0).ser(se_PutGeofenceCommand).de(de_PutGeofenceCommand).build() {
};
__name(_PutGeofenceCommand, "PutGeofenceCommand");
var PutGeofenceCommand = _PutGeofenceCommand;

// src/commands/SearchPlaceIndexForPositionCommand.ts



var _SearchPlaceIndexForPositionCommand = class _SearchPlaceIndexForPositionCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "SearchPlaceIndexForPosition", {}).n("LocationClient", "SearchPlaceIndexForPositionCommand").f(SearchPlaceIndexForPositionRequestFilterSensitiveLog, SearchPlaceIndexForPositionResponseFilterSensitiveLog).ser(se_SearchPlaceIndexForPositionCommand).de(de_SearchPlaceIndexForPositionCommand).build() {
};
__name(_SearchPlaceIndexForPositionCommand, "SearchPlaceIndexForPositionCommand");
var SearchPlaceIndexForPositionCommand = _SearchPlaceIndexForPositionCommand;

// src/commands/SearchPlaceIndexForSuggestionsCommand.ts



var _SearchPlaceIndexForSuggestionsCommand = class _SearchPlaceIndexForSuggestionsCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "SearchPlaceIndexForSuggestions", {}).n("LocationClient", "SearchPlaceIndexForSuggestionsCommand").f(SearchPlaceIndexForSuggestionsRequestFilterSensitiveLog, SearchPlaceIndexForSuggestionsResponseFilterSensitiveLog).ser(se_SearchPlaceIndexForSuggestionsCommand).de(de_SearchPlaceIndexForSuggestionsCommand).build() {
};
__name(_SearchPlaceIndexForSuggestionsCommand, "SearchPlaceIndexForSuggestionsCommand");
var SearchPlaceIndexForSuggestionsCommand = _SearchPlaceIndexForSuggestionsCommand;

// src/commands/SearchPlaceIndexForTextCommand.ts



var _SearchPlaceIndexForTextCommand = class _SearchPlaceIndexForTextCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "SearchPlaceIndexForText", {}).n("LocationClient", "SearchPlaceIndexForTextCommand").f(SearchPlaceIndexForTextRequestFilterSensitiveLog, SearchPlaceIndexForTextResponseFilterSensitiveLog).ser(se_SearchPlaceIndexForTextCommand).de(de_SearchPlaceIndexForTextCommand).build() {
};
__name(_SearchPlaceIndexForTextCommand, "SearchPlaceIndexForTextCommand");
var SearchPlaceIndexForTextCommand = _SearchPlaceIndexForTextCommand;

// src/commands/TagResourceCommand.ts



var _TagResourceCommand = class _TagResourceCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "TagResource", {}).n("LocationClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
};
__name(_TagResourceCommand, "TagResourceCommand");
var TagResourceCommand = _TagResourceCommand;

// src/commands/UntagResourceCommand.ts



var _UntagResourceCommand = class _UntagResourceCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "UntagResource", {}).n("LocationClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
};
__name(_UntagResourceCommand, "UntagResourceCommand");
var UntagResourceCommand = _UntagResourceCommand;

// src/commands/UpdateGeofenceCollectionCommand.ts



var _UpdateGeofenceCollectionCommand = class _UpdateGeofenceCollectionCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "UpdateGeofenceCollection", {}).n("LocationClient", "UpdateGeofenceCollectionCommand").f(void 0, void 0).ser(se_UpdateGeofenceCollectionCommand).de(de_UpdateGeofenceCollectionCommand).build() {
};
__name(_UpdateGeofenceCollectionCommand, "UpdateGeofenceCollectionCommand");
var UpdateGeofenceCollectionCommand = _UpdateGeofenceCollectionCommand;

// src/commands/UpdateKeyCommand.ts



var _UpdateKeyCommand = class _UpdateKeyCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "UpdateKey", {}).n("LocationClient", "UpdateKeyCommand").f(void 0, void 0).ser(se_UpdateKeyCommand).de(de_UpdateKeyCommand).build() {
};
__name(_UpdateKeyCommand, "UpdateKeyCommand");
var UpdateKeyCommand = _UpdateKeyCommand;

// src/commands/UpdateMapCommand.ts



var _UpdateMapCommand = class _UpdateMapCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "UpdateMap", {}).n("LocationClient", "UpdateMapCommand").f(void 0, void 0).ser(se_UpdateMapCommand).de(de_UpdateMapCommand).build() {
};
__name(_UpdateMapCommand, "UpdateMapCommand");
var UpdateMapCommand = _UpdateMapCommand;

// src/commands/UpdatePlaceIndexCommand.ts



var _UpdatePlaceIndexCommand = class _UpdatePlaceIndexCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "UpdatePlaceIndex", {}).n("LocationClient", "UpdatePlaceIndexCommand").f(void 0, void 0).ser(se_UpdatePlaceIndexCommand).de(de_UpdatePlaceIndexCommand).build() {
};
__name(_UpdatePlaceIndexCommand, "UpdatePlaceIndexCommand");
var UpdatePlaceIndexCommand = _UpdatePlaceIndexCommand;

// src/commands/UpdateRouteCalculatorCommand.ts



var _UpdateRouteCalculatorCommand = class _UpdateRouteCalculatorCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "UpdateRouteCalculator", {}).n("LocationClient", "UpdateRouteCalculatorCommand").f(void 0, void 0).ser(se_UpdateRouteCalculatorCommand).de(de_UpdateRouteCalculatorCommand).build() {
};
__name(_UpdateRouteCalculatorCommand, "UpdateRouteCalculatorCommand");
var UpdateRouteCalculatorCommand = _UpdateRouteCalculatorCommand;

// src/commands/UpdateTrackerCommand.ts



var _UpdateTrackerCommand = class _UpdateTrackerCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "UpdateTracker", {}).n("LocationClient", "UpdateTrackerCommand").f(void 0, void 0).ser(se_UpdateTrackerCommand).de(de_UpdateTrackerCommand).build() {
};
__name(_UpdateTrackerCommand, "UpdateTrackerCommand");
var UpdateTrackerCommand = _UpdateTrackerCommand;

// src/commands/VerifyDevicePositionCommand.ts



var _VerifyDevicePositionCommand = class _VerifyDevicePositionCommand extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("LocationService", "VerifyDevicePosition", {}).n("LocationClient", "VerifyDevicePositionCommand").f(VerifyDevicePositionRequestFilterSensitiveLog, VerifyDevicePositionResponseFilterSensitiveLog).ser(se_VerifyDevicePositionCommand).de(de_VerifyDevicePositionCommand).build() {
};
__name(_VerifyDevicePositionCommand, "VerifyDevicePositionCommand");
var VerifyDevicePositionCommand = _VerifyDevicePositionCommand;

// src/Location.ts
var commands = {
  AssociateTrackerConsumerCommand,
  BatchDeleteDevicePositionHistoryCommand,
  BatchDeleteGeofenceCommand,
  BatchEvaluateGeofencesCommand,
  BatchGetDevicePositionCommand,
  BatchPutGeofenceCommand,
  BatchUpdateDevicePositionCommand,
  CalculateRouteCommand,
  CalculateRouteMatrixCommand,
  CreateGeofenceCollectionCommand,
  CreateKeyCommand,
  CreateMapCommand,
  CreatePlaceIndexCommand,
  CreateRouteCalculatorCommand,
  CreateTrackerCommand,
  DeleteGeofenceCollectionCommand,
  DeleteKeyCommand,
  DeleteMapCommand,
  DeletePlaceIndexCommand,
  DeleteRouteCalculatorCommand,
  DeleteTrackerCommand,
  DescribeGeofenceCollectionCommand,
  DescribeKeyCommand,
  DescribeMapCommand,
  DescribePlaceIndexCommand,
  DescribeRouteCalculatorCommand,
  DescribeTrackerCommand,
  DisassociateTrackerConsumerCommand,
  ForecastGeofenceEventsCommand,
  GetDevicePositionCommand,
  GetDevicePositionHistoryCommand,
  GetGeofenceCommand,
  GetMapGlyphsCommand,
  GetMapSpritesCommand,
  GetMapStyleDescriptorCommand,
  GetMapTileCommand,
  GetPlaceCommand,
  ListDevicePositionsCommand,
  ListGeofenceCollectionsCommand,
  ListGeofencesCommand,
  ListKeysCommand,
  ListMapsCommand,
  ListPlaceIndexesCommand,
  ListRouteCalculatorsCommand,
  ListTagsForResourceCommand,
  ListTrackerConsumersCommand,
  ListTrackersCommand,
  PutGeofenceCommand,
  SearchPlaceIndexForPositionCommand,
  SearchPlaceIndexForSuggestionsCommand,
  SearchPlaceIndexForTextCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateGeofenceCollectionCommand,
  UpdateKeyCommand,
  UpdateMapCommand,
  UpdatePlaceIndexCommand,
  UpdateRouteCalculatorCommand,
  UpdateTrackerCommand,
  VerifyDevicePositionCommand
};
var _Location = class _Location extends LocationClient {
};
__name(_Location, "Location");
var Location = _Location;
(0, import_smithy_client.createAggregatedClient)(commands, Location);

// src/pagination/ForecastGeofenceEventsPaginator.ts

var paginateForecastGeofenceEvents = (0, import_core.createPaginator)(LocationClient, ForecastGeofenceEventsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/GetDevicePositionHistoryPaginator.ts

var paginateGetDevicePositionHistory = (0, import_core.createPaginator)(LocationClient, GetDevicePositionHistoryCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListDevicePositionsPaginator.ts

var paginateListDevicePositions = (0, import_core.createPaginator)(LocationClient, ListDevicePositionsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListGeofenceCollectionsPaginator.ts

var paginateListGeofenceCollections = (0, import_core.createPaginator)(LocationClient, ListGeofenceCollectionsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListGeofencesPaginator.ts

var paginateListGeofences = (0, import_core.createPaginator)(LocationClient, ListGeofencesCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListKeysPaginator.ts

var paginateListKeys = (0, import_core.createPaginator)(LocationClient, ListKeysCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListMapsPaginator.ts

var paginateListMaps = (0, import_core.createPaginator)(LocationClient, ListMapsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListPlaceIndexesPaginator.ts

var paginateListPlaceIndexes = (0, import_core.createPaginator)(LocationClient, ListPlaceIndexesCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListRouteCalculatorsPaginator.ts

var paginateListRouteCalculators = (0, import_core.createPaginator)(LocationClient, ListRouteCalculatorsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListTrackerConsumersPaginator.ts

var paginateListTrackerConsumers = (0, import_core.createPaginator)(LocationClient, ListTrackerConsumersCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListTrackersPaginator.ts

var paginateListTrackers = (0, import_core.createPaginator)(LocationClient, ListTrackersCommand, "NextToken", "NextToken", "MaxResults");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  LocationServiceException,
  __Client,
  LocationClient,
  Location,
  $Command,
  AssociateTrackerConsumerCommand,
  BatchDeleteDevicePositionHistoryCommand,
  BatchDeleteGeofenceCommand,
  BatchEvaluateGeofencesCommand,
  BatchGetDevicePositionCommand,
  BatchPutGeofenceCommand,
  BatchUpdateDevicePositionCommand,
  CalculateRouteCommand,
  CalculateRouteMatrixCommand,
  CreateGeofenceCollectionCommand,
  CreateKeyCommand,
  CreateMapCommand,
  CreatePlaceIndexCommand,
  CreateRouteCalculatorCommand,
  CreateTrackerCommand,
  DeleteGeofenceCollectionCommand,
  DeleteKeyCommand,
  DeleteMapCommand,
  DeletePlaceIndexCommand,
  DeleteRouteCalculatorCommand,
  DeleteTrackerCommand,
  DescribeGeofenceCollectionCommand,
  DescribeKeyCommand,
  DescribeMapCommand,
  DescribePlaceIndexCommand,
  DescribeRouteCalculatorCommand,
  DescribeTrackerCommand,
  DisassociateTrackerConsumerCommand,
  ForecastGeofenceEventsCommand,
  GetDevicePositionCommand,
  GetDevicePositionHistoryCommand,
  GetGeofenceCommand,
  GetMapGlyphsCommand,
  GetMapSpritesCommand,
  GetMapStyleDescriptorCommand,
  GetMapTileCommand,
  GetPlaceCommand,
  ListDevicePositionsCommand,
  ListGeofenceCollectionsCommand,
  ListGeofencesCommand,
  ListKeysCommand,
  ListMapsCommand,
  ListPlaceIndexesCommand,
  ListRouteCalculatorsCommand,
  ListTagsForResourceCommand,
  ListTrackerConsumersCommand,
  ListTrackersCommand,
  PutGeofenceCommand,
  SearchPlaceIndexForPositionCommand,
  SearchPlaceIndexForSuggestionsCommand,
  SearchPlaceIndexForTextCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateGeofenceCollectionCommand,
  UpdateKeyCommand,
  UpdateMapCommand,
  UpdatePlaceIndexCommand,
  UpdateRouteCalculatorCommand,
  UpdateTrackerCommand,
  VerifyDevicePositionCommand,
  paginateForecastGeofenceEvents,
  paginateGetDevicePositionHistory,
  paginateListDevicePositions,
  paginateListGeofenceCollections,
  paginateListGeofences,
  paginateListKeys,
  paginateListMaps,
  paginateListPlaceIndexes,
  paginateListRouteCalculators,
  paginateListTrackerConsumers,
  paginateListTrackers,
  AccessDeniedException,
  ConflictException,
  InternalServerException,
  ServiceQuotaExceededException,
  ThrottlingException,
  ValidationException,
  ResourceNotFoundException,
  CreateKeyResponseFilterSensitiveLog,
  DescribeKeyResponseFilterSensitiveLog,
  DevicePositionUpdateFilterSensitiveLog,
  BatchEvaluateGeofencesRequestFilterSensitiveLog,
  DevicePositionFilterSensitiveLog,
  BatchGetDevicePositionResponseFilterSensitiveLog,
  CircleFilterSensitiveLog,
  GeofenceGeometryFilterSensitiveLog,
  BatchPutGeofenceRequestEntryFilterSensitiveLog,
  BatchPutGeofenceRequestFilterSensitiveLog,
  BatchUpdateDevicePositionRequestFilterSensitiveLog,
  CalculateRouteRequestFilterSensitiveLog,
  LegGeometryFilterSensitiveLog,
  StepFilterSensitiveLog,
  LegFilterSensitiveLog,
  CalculateRouteSummaryFilterSensitiveLog,
  CalculateRouteResponseFilterSensitiveLog,
  CalculateRouteMatrixRequestFilterSensitiveLog,
  CalculateRouteMatrixResponseFilterSensitiveLog,
  DeviceStateFilterSensitiveLog,
  ForecastedEventFilterSensitiveLog,
  ForecastGeofenceEventsDeviceStateFilterSensitiveLog,
  ForecastGeofenceEventsRequestFilterSensitiveLog,
  ForecastGeofenceEventsResponseFilterSensitiveLog,
  GetGeofenceResponseFilterSensitiveLog,
  ListGeofenceResponseEntryFilterSensitiveLog,
  ListGeofencesResponseFilterSensitiveLog,
  PutGeofenceRequestFilterSensitiveLog,
  GetDevicePositionResponseFilterSensitiveLog,
  GetDevicePositionHistoryResponseFilterSensitiveLog,
  GetMapGlyphsRequestFilterSensitiveLog,
  GetMapSpritesRequestFilterSensitiveLog,
  GetMapStyleDescriptorRequestFilterSensitiveLog,
  GetMapTileRequestFilterSensitiveLog,
  GetPlaceRequestFilterSensitiveLog,
  PlaceGeometryFilterSensitiveLog,
  PlaceFilterSensitiveLog,
  GetPlaceResponseFilterSensitiveLog,
  InferredStateFilterSensitiveLog,
  TrackingFilterGeometryFilterSensitiveLog,
  ListDevicePositionsRequestFilterSensitiveLog,
  ListDevicePositionsResponseEntryFilterSensitiveLog,
  ListDevicePositionsResponseFilterSensitiveLog,
  SearchPlaceIndexForPositionRequestFilterSensitiveLog,
  SearchForPositionResultFilterSensitiveLog,
  SearchPlaceIndexForPositionSummaryFilterSensitiveLog,
  SearchPlaceIndexForPositionResponseFilterSensitiveLog,
  SearchPlaceIndexForSuggestionsRequestFilterSensitiveLog,
  SearchPlaceIndexForSuggestionsSummaryFilterSensitiveLog,
  SearchPlaceIndexForSuggestionsResponseFilterSensitiveLog,
  SearchPlaceIndexForTextRequestFilterSensitiveLog,
  SearchForTextResultFilterSensitiveLog,
  SearchPlaceIndexForTextSummaryFilterSensitiveLog,
  SearchPlaceIndexForTextResponseFilterSensitiveLog,
  VerifyDevicePositionRequestFilterSensitiveLog,
  VerifyDevicePositionResponseFilterSensitiveLog
});

