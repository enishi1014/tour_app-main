// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import turfCircle from "@turf/circle";
/**
 * Converts an array of GeoJSON Features to a FeatureCollection.
 *
 * @param features An array of GeoJSON Features.
 * @returns A GeoJSON FeatureCollection containing provided Features.
 */
export function toFeatureCollection(features) {
    return {
        type: "FeatureCollection",
        features: features.filter((feature) => feature),
    };
}
/**
 * Optionally flatten the Amazon Location Service object.
 *
 * @param obj Amazon Location Service object.
 * @returns Flattened object.
 */
export function flattenProperties(obj, prefix = "") {
    if (typeof obj !== "object" || obj === null || Array.isArray(obj)) {
        return {};
    }
    const result = {};
    Object.entries(obj).forEach(([key, value]) => {
        const newKey = prefix ? `${prefix}.${key}` : key;
        if (typeof value === "object" && value !== null && !Array.isArray(value) && key !== "Geometry") {
            Object.assign(result, flattenProperties(value, newKey));
        }
        else {
            result[newKey] = value;
        }
    });
    return result;
}
export function emptyFeatureCollection() {
    return {
        type: "FeatureCollection",
        features: [],
    };
}
export function convertGeometryToFeature(geometry, properties) {
    if (geometry) {
        const [type, coordinates] = Object.entries(geometry).find((
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        [_, coordinates]) => coordinates != undefined) || [];
        switch (type) {
            case "Point":
            case "LineString":
            case "Polygon":
                return {
                    type: "Feature",
                    properties: Object.assign({}, properties),
                    geometry: {
                        type,
                        coordinates,
                    },
                };
            case "Circle": {
                const { Center: center, Radius: radius } = coordinates;
                return turfCircle(center, radius, {
                    units: "meters",
                    properties: Object.assign({ center,
                        radius }, properties),
                });
            }
        }
    }
}
